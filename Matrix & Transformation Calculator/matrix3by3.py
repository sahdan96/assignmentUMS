#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 09, 2018 08:32:05 PM CST  platform: Windows NT

import sys
import numpy as np
from tkinter import messagebox
from winsound import*
import basicCalt as Cal
import Vector2 as Vec
import matrix2 as mat2
import matrix4by4 as mat4
import about as ab
import main_menu as mm
import  series_transform as st
import CompositeTransform as ct
import Vector3d as Vec3
import rotation_3d as r3d

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Basic_calculator (root)
    root.resizable(width=False, height=False)
    PlaySound(None, SND_PURGE)
    root.protocol("WM_DELETE_WINDOW", top.when_closing)
    root.iconbitmap("icon.ico")
    root.mainloop()

w = None
def create_Basic_calculator(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Basic_calculator (w)
    return (w, top)

def destroy_Basic_calculator():
    global w
    w.destroy()
    w = None


class Basic_calculator:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 11 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Courier New} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font12 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Segoe UI} -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "-family {Segoe UI} -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 11 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("700x816+533+5")
        top.title("My Vector and Matrix Calculator")

        self.bg = Label(top)
        self.bg.place(relx=0.0, rely=0.0)
        self._bg = PhotoImage(file="binary.png")
        self.bg.configure(image=self._bg)

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.mode = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.mode,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Mode")
        self.mode.add_command(command = lambda : self.openBasicCal(),
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Standard Calculator")
        self.allMatMenu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.allMatMenu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Matrix Calculator")

        self.allMatMenu.add_command(command=lambda: self.to_2by2(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 2x2")

        self.allMatMenu.add_command(
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 3x3")

        self.allMatMenu.add_command(command=lambda: self.to_4by4(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 4x4")

        self.allMatMenu.add_command(command=lambda: self.to_r3d(),
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="3D rotation")

        self.vector_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.vector_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Vector Calculator")

        self.vector_menu.add_command(command=lambda: self.openVector(),
                                     activebackground="#d9d9d9",
                                     activeforeground="#000000",
                                     background="#d9d9d9",
                                     font="TkMenuFont",
                                     foreground="#000000",
                                     label="2D vector")

        self.vector_menu.add_command(command = lambda : self.openVector3d(),
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="3D vector")

        self.trans_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.trans_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Transformation")

        self.trans_menu.add_command(command=lambda: self.to_st(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="series transformation")

        self.trans_menu.add_command(command=lambda: self.to_ct(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="composite transformation")

        self.menubar.add_command(command=lambda: self.openAbout(),
                                 activebackground="#d8d8d8",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="About")

        self.b2menu = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.b2menu,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Navigate")

        self.b2menu.add_command(command=lambda: self.btoMain(),
                                activebackground="#d9d9d9",
                                activeforeground="#000000",
                                background="#d9d9d9",
                                font="TkMenuFont",
                                foreground="#000000",
                                label="back to main menu")



        self.LabelframeMatA = LabelFrame(top)
        self.LabelframeMatA.place(relx=0.057, rely=0.012, relheight=0.331
                , relwidth=0.429)
        self.LabelframeMatA.configure(relief=GROOVE)
        self.LabelframeMatA.configure(borderwidth="5")
        self.LabelframeMatA.configure(font=font13)
        self.LabelframeMatA.configure(foreground="black")
        self.LabelframeMatA.configure(labelanchor="n")
        self.LabelframeMatA.configure(text='''Matrix A''')
        self.LabelframeMatA.configure(background="lemon chiffon")
        self.LabelframeMatA.configure(highlightbackground="#d9d9d9")
        self.LabelframeMatA.configure(highlightcolor="black")
        self.LabelframeMatA.configure(width=150)

        self.EntryA_1 = Entry(self.LabelframeMatA)
        self.EntryA_1.place(relx=0.2, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_1.configure(background="white")
        self.EntryA_1.configure(disabledforeground="#a3a3a3")
        self.EntryA_1.configure(font="TkFixedFont")
        self.EntryA_1.configure(foreground="#000000")
        self.EntryA_1.configure(highlightbackground="#d9d9d9")
        self.EntryA_1.configure(highlightcolor="black")
        self.EntryA_1.configure(insertbackground="black")
        self.EntryA_1.configure(justify=CENTER)
        self.EntryA_1.configure(selectbackground="#c4c4c4")
        self.EntryA_1.configure(selectforeground="black")

        self.EntryA_2 = Entry(self.LabelframeMatA)
        self.EntryA_2.place(relx=0.4, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_2.configure(background="white")
        self.EntryA_2.configure(disabledforeground="#a3a3a3")
        self.EntryA_2.configure(font="TkFixedFont")
        self.EntryA_2.configure(foreground="#000000")
        self.EntryA_2.configure(highlightbackground="#d9d9d9")
        self.EntryA_2.configure(highlightcolor="black")
        self.EntryA_2.configure(insertbackground="black")
        self.EntryA_2.configure(justify=CENTER)
        self.EntryA_2.configure(selectbackground="#c4c4c4")
        self.EntryA_2.configure(selectforeground="black")

        self.EntryA_3 = Entry(self.LabelframeMatA)
        self.EntryA_3.place(relx=0.6, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_3.configure(background="white")
        self.EntryA_3.configure(disabledforeground="#a3a3a3")
        self.EntryA_3.configure(font="TkFixedFont")
        self.EntryA_3.configure(foreground="#000000")
        self.EntryA_3.configure(highlightbackground="#d9d9d9")
        self.EntryA_3.configure(highlightcolor="black")
        self.EntryA_3.configure(insertbackground="black")
        self.EntryA_3.configure(justify=CENTER)
        self.EntryA_3.configure(selectbackground="#c4c4c4")
        self.EntryA_3.configure(selectforeground="black")

        self.EntryA_4 = Entry(self.LabelframeMatA)
        self.EntryA_4.place(relx=0.2, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_4.configure(background="white")
        self.EntryA_4.configure(disabledforeground="#a3a3a3")
        self.EntryA_4.configure(font="TkFixedFont")
        self.EntryA_4.configure(foreground="#000000")
        self.EntryA_4.configure(highlightbackground="#d9d9d9")
        self.EntryA_4.configure(highlightcolor="black")
        self.EntryA_4.configure(insertbackground="black")
        self.EntryA_4.configure(justify=CENTER)
        self.EntryA_4.configure(selectbackground="#c4c4c4")
        self.EntryA_4.configure(selectforeground="black")

        self.EntryA_5 = Entry(self.LabelframeMatA)
        self.EntryA_5.place(relx=0.4, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_5.configure(background="white")
        self.EntryA_5.configure(disabledforeground="#a3a3a3")
        self.EntryA_5.configure(font="TkFixedFont")
        self.EntryA_5.configure(foreground="#000000")
        self.EntryA_5.configure(highlightbackground="#d9d9d9")
        self.EntryA_5.configure(highlightcolor="black")
        self.EntryA_5.configure(insertbackground="black")
        self.EntryA_5.configure(justify=CENTER)
        self.EntryA_5.configure(selectbackground="#c4c4c4")
        self.EntryA_5.configure(selectforeground="black")

        self.EntryA_6 = Entry(self.LabelframeMatA)
        self.EntryA_6.place(relx=0.6, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_6.configure(background="white")
        self.EntryA_6.configure(disabledforeground="#a3a3a3")
        self.EntryA_6.configure(font="TkFixedFont")
        self.EntryA_6.configure(foreground="#000000")
        self.EntryA_6.configure(highlightbackground="#d9d9d9")
        self.EntryA_6.configure(highlightcolor="black")
        self.EntryA_6.configure(insertbackground="black")
        self.EntryA_6.configure(justify=CENTER)
        self.EntryA_6.configure(selectbackground="#c4c4c4")
        self.EntryA_6.configure(selectforeground="black")

        self.EntryA_7 = Entry(self.LabelframeMatA)
        self.EntryA_7.place(relx=0.2, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_7.configure(background="white")
        self.EntryA_7.configure(disabledforeground="#a3a3a3")
        self.EntryA_7.configure(font="TkFixedFont")
        self.EntryA_7.configure(foreground="#000000")
        self.EntryA_7.configure(highlightbackground="#d9d9d9")
        self.EntryA_7.configure(highlightcolor="black")
        self.EntryA_7.configure(insertbackground="black")
        self.EntryA_7.configure(justify=CENTER)
        self.EntryA_7.configure(selectbackground="#c4c4c4")
        self.EntryA_7.configure(selectforeground="black")

        self.EntryA_8 = Entry(self.LabelframeMatA)
        self.EntryA_8.place(relx=0.4, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_8.configure(background="white")
        self.EntryA_8.configure(disabledforeground="#a3a3a3")
        self.EntryA_8.configure(font="TkFixedFont")
        self.EntryA_8.configure(foreground="#000000")
        self.EntryA_8.configure(highlightbackground="#d9d9d9")
        self.EntryA_8.configure(highlightcolor="black")
        self.EntryA_8.configure(insertbackground="black")
        self.EntryA_8.configure(justify=CENTER)
        self.EntryA_8.configure(selectbackground="#c4c4c4")
        self.EntryA_8.configure(selectforeground="black")

        self.EntryA_9 = Entry(self.LabelframeMatA)
        self.EntryA_9.place(relx=0.6, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryA_9.configure(background="white")
        self.EntryA_9.configure(disabledforeground="#a3a3a3")
        self.EntryA_9.configure(font="TkFixedFont")
        self.EntryA_9.configure(foreground="#000000")
        self.EntryA_9.configure(highlightbackground="#d9d9d9")
        self.EntryA_9.configure(highlightcolor="black")
        self.EntryA_9.configure(insertbackground="black")
        self.EntryA_9.configure(justify=CENTER)
        self.EntryA_9.configure(selectbackground="#c4c4c4")
        self.EntryA_9.configure(selectforeground="black")

        self.ButtonClearA = Button(self.LabelframeMatA)
        self.ButtonClearA.place(relx=0.4, rely=0.815, height=38, width=50
                , bordermode='ignore')
        self.ButtonClearA.configure(activebackground="#d9d9d9")
        self.ButtonClearA.configure(activeforeground="#000000")
        self.ButtonClearA.configure(background="azure")
        self.ButtonClearA.configure(disabledforeground="#a3a3a3")
        self.ButtonClearA.configure(font=font14)
        self.ButtonClearA.configure(foreground="#000000")
        self.ButtonClearA.configure(highlightbackground="#d9d9d9")
        self.ButtonClearA.configure(highlightcolor="black")
        self.ButtonClearA.configure(pady="0")
        self.ButtonClearA.configure(text='''Clear''')
        self.ButtonClearA.configure(command = lambda : self.clearA())

        self.LabelframeMatB = LabelFrame(top)
        self.LabelframeMatB.place(relx=0.514, rely=0.012, relheight=0.331
                , relwidth=0.429)
        self.LabelframeMatB.configure(relief=GROOVE)
        self.LabelframeMatB.configure(borderwidth="5")
        self.LabelframeMatB.configure(font=font13)
        self.LabelframeMatB.configure(foreground="black")
        self.LabelframeMatB.configure(labelanchor="n")
        self.LabelframeMatB.configure(text='''Matrix B''')
        self.LabelframeMatB.configure(background="lemon chiffon")
        self.LabelframeMatB.configure(highlightbackground="#d9d9d9")
        self.LabelframeMatB.configure(highlightcolor="black")
        self.LabelframeMatB.configure(width=150)

        self.EntryB_1 = Entry(self.LabelframeMatB)
        self.EntryB_1.place(relx=0.2, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_1.configure(background="white")
        self.EntryB_1.configure(disabledforeground="#a3a3a3")
        self.EntryB_1.configure(font="TkFixedFont")
        self.EntryB_1.configure(foreground="#000000")
        self.EntryB_1.configure(highlightbackground="#d9d9d9")
        self.EntryB_1.configure(highlightcolor="black")
        self.EntryB_1.configure(insertbackground="black")
        self.EntryB_1.configure(justify=CENTER)
        self.EntryB_1.configure(selectbackground="#c4c4c4")
        self.EntryB_1.configure(selectforeground="black")

        self.EntryB_2 = Entry(self.LabelframeMatB)
        self.EntryB_2.place(relx=0.4, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_2.configure(background="white")
        self.EntryB_2.configure(disabledforeground="#a3a3a3")
        self.EntryB_2.configure(font="TkFixedFont")
        self.EntryB_2.configure(foreground="#000000")
        self.EntryB_2.configure(highlightbackground="#d9d9d9")
        self.EntryB_2.configure(highlightcolor="black")
        self.EntryB_2.configure(insertbackground="black")
        self.EntryB_2.configure(justify=CENTER)
        self.EntryB_2.configure(selectbackground="#c4c4c4")
        self.EntryB_2.configure(selectforeground="black")

        self.EntryB_3 = Entry(self.LabelframeMatB)
        self.EntryB_3.place(relx=0.6, rely=0.111, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_3.configure(background="white")
        self.EntryB_3.configure(disabledforeground="#a3a3a3")
        self.EntryB_3.configure(font="TkFixedFont")
        self.EntryB_3.configure(foreground="#000000")
        self.EntryB_3.configure(highlightbackground="#d9d9d9")
        self.EntryB_3.configure(highlightcolor="black")
        self.EntryB_3.configure(insertbackground="black")
        self.EntryB_3.configure(justify=CENTER)
        self.EntryB_3.configure(selectbackground="#c4c4c4")
        self.EntryB_3.configure(selectforeground="black")

        self.EntryB_4 = Entry(self.LabelframeMatB)
        self.EntryB_4.place(relx=0.2, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_4.configure(background="white")
        self.EntryB_4.configure(disabledforeground="#a3a3a3")
        self.EntryB_4.configure(font="TkFixedFont")
        self.EntryB_4.configure(foreground="#000000")
        self.EntryB_4.configure(highlightbackground="#d9d9d9")
        self.EntryB_4.configure(highlightcolor="black")
        self.EntryB_4.configure(insertbackground="black")
        self.EntryB_4.configure(justify=CENTER)
        self.EntryB_4.configure(selectbackground="#c4c4c4")
        self.EntryB_4.configure(selectforeground="black")

        self.EntryB_5 = Entry(self.LabelframeMatB)
        self.EntryB_5.place(relx=0.4, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_5.configure(background="white")
        self.EntryB_5.configure(disabledforeground="#a3a3a3")
        self.EntryB_5.configure(font="TkFixedFont")
        self.EntryB_5.configure(foreground="#000000")
        self.EntryB_5.configure(highlightbackground="#d9d9d9")
        self.EntryB_5.configure(highlightcolor="black")
        self.EntryB_5.configure(insertbackground="black")
        self.EntryB_5.configure(justify=CENTER)
        self.EntryB_5.configure(selectbackground="#c4c4c4")
        self.EntryB_5.configure(selectforeground="black")

        self.EntryB_6 = Entry(self.LabelframeMatB)
        self.EntryB_6.place(relx=0.6, rely=0.333, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_6.configure(background="white")
        self.EntryB_6.configure(disabledforeground="#a3a3a3")
        self.EntryB_6.configure(font="TkFixedFont")
        self.EntryB_6.configure(foreground="#000000")
        self.EntryB_6.configure(highlightbackground="#d9d9d9")
        self.EntryB_6.configure(highlightcolor="black")
        self.EntryB_6.configure(insertbackground="black")
        self.EntryB_6.configure(justify=CENTER)
        self.EntryB_6.configure(selectbackground="#c4c4c4")
        self.EntryB_6.configure(selectforeground="black")

        self.EntryB_7 = Entry(self.LabelframeMatB)
        self.EntryB_7.place(relx=0.2, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_7.configure(background="white")
        self.EntryB_7.configure(disabledforeground="#a3a3a3")
        self.EntryB_7.configure(font="TkFixedFont")
        self.EntryB_7.configure(foreground="#000000")
        self.EntryB_7.configure(highlightbackground="#d9d9d9")
        self.EntryB_7.configure(highlightcolor="black")
        self.EntryB_7.configure(insertbackground="black")
        self.EntryB_7.configure(justify=CENTER)
        self.EntryB_7.configure(selectbackground="#c4c4c4")
        self.EntryB_7.configure(selectforeground="black")

        self.EntryB_8 = Entry(self.LabelframeMatB)
        self.EntryB_8.place(relx=0.4, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_8.configure(background="white")
        self.EntryB_8.configure(disabledforeground="#a3a3a3")
        self.EntryB_8.configure(font="TkFixedFont")
        self.EntryB_8.configure(foreground="#000000")
        self.EntryB_8.configure(highlightbackground="#d9d9d9")
        self.EntryB_8.configure(highlightcolor="black")
        self.EntryB_8.configure(insertbackground="black")
        self.EntryB_8.configure(justify=CENTER)
        self.EntryB_8.configure(selectbackground="#c4c4c4")
        self.EntryB_8.configure(selectforeground="black")

        self.EntryB_9 = Entry(self.LabelframeMatB)
        self.EntryB_9.place(relx=0.6, rely=0.556, height=50, relwidth=0.167
                , bordermode='ignore')
        self.EntryB_9.configure(background="white")
        self.EntryB_9.configure(disabledforeground="#a3a3a3")
        self.EntryB_9.configure(font="TkFixedFont")
        self.EntryB_9.configure(foreground="#000000")
        self.EntryB_9.configure(highlightbackground="#d9d9d9")
        self.EntryB_9.configure(highlightcolor="black")
        self.EntryB_9.configure(insertbackground="black")
        self.EntryB_9.configure(justify=CENTER)
        self.EntryB_9.configure(selectbackground="#c4c4c4")
        self.EntryB_9.configure(selectforeground="black")

        self.ButtonClearB = Button(self.LabelframeMatB)
        self.ButtonClearB.place(relx=0.4, rely=0.815, height=38, width=50
                , bordermode='ignore')
        self.ButtonClearB.configure(activebackground="#d9d9d9")
        self.ButtonClearB.configure(activeforeground="#000000")
        self.ButtonClearB.configure(background="azure")
        self.ButtonClearB.configure(disabledforeground="#a3a3a3")
        self.ButtonClearB.configure(font=font14)
        self.ButtonClearB.configure(foreground="#000000")
        self.ButtonClearB.configure(highlightbackground="#d9d9d9")
        self.ButtonClearB.configure(highlightcolor="black")
        self.ButtonClearB.configure(pady="0")
        self.ButtonClearB.configure(text='''Clear''')
        self.ButtonClearB.configure(command = lambda : self.clearB())

        self.LabelframeOperation = LabelFrame(top)
        self.LabelframeOperation.place(relx=0.057, rely=0.355, relheight=0.619
                , relwidth=0.886)
        self.LabelframeOperation.configure(relief=GROOVE)
        self.LabelframeOperation.configure(borderwidth="1")
        self.LabelframeOperation.configure(font=font9)
        self.LabelframeOperation.configure(foreground="black")
        self.LabelframeOperation.configure(labelanchor="n")
        self.LabelframeOperation.configure(text='''operation of matrix''')
        self.LabelframeOperation.configure(background="deep sky blue")
        self.LabelframeOperation.configure(highlightbackground="#f0f0f0")
        self.LabelframeOperation.configure(highlightcolor="#646464")
        self.LabelframeOperation.configure(width=620)

        self.OptionAdd = ttk.Combobox(self.LabelframeOperation)
        self.OptionAdd.place(relx=0.048, rely=0.099, relheight=0.065
                             , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "A+B", ]
        self.OptionAdd.configure(values=self.value_list)
        self.OptionAdd.configure(font=font10)
        READONLY = 'readonly'
        self.OptionAdd.configure(state=READONLY)
        self.OptionAdd.configure(foreground="#000000")
        self.OptionAdd.configure(background="#000000")
        self.OptionAdd.set("select addition order")

        self.OptionSubtract = ttk.Combobox(self.LabelframeOperation)
        self.OptionSubtract.place(relx=0.048, rely=0.218, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "A-B","B-A",]
        self.OptionSubtract.configure(values=self.value_list)
        self.OptionSubtract.configure(font=font10)
        READONLY = 'readonly'
        self.OptionSubtract.configure(state=READONLY)
        self.OptionSubtract.configure(takefocus="")
        self.OptionSubtract.set("select subtraction order")

        self.OptionMultiply = ttk.Combobox(self.LabelframeOperation)
        self.OptionMultiply.place(relx=0.048, rely=0.337, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "AxB","BxA",]
        self.OptionMultiply.configure(values=self.value_list)
        self.OptionMultiply.configure(font=font10)
        READONLY = 'readonly'
        self.OptionMultiply.configure(state=READONLY)
        self.OptionMultiply.configure(takefocus="")
        self.OptionMultiply.set("select multiply order")

        self.OptionDet = ttk.Combobox(self.LabelframeOperation)
        self.OptionDet.place(relx=0.048, rely=0.455, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "Determinant of A","Determinant of B",]
        self.OptionDet.configure(values=self.value_list)
        self.OptionDet.configure(font=font10)
        READONLY = 'readonly'
        self.OptionDet.configure(state=READONLY)
        self.OptionDet.configure(foreground="#000000")
        self.OptionDet.configure(takefocus="")
        self.OptionDet.set("determinant of matrix")

        self.OptionInverse = ttk.Combobox(self.LabelframeOperation)
        self.OptionInverse.place(relx=0.048, rely=0.574, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "inverse of A","inverse of B",]
        self.OptionInverse.configure(values=self.value_list)
        self.OptionInverse.configure(font=font10)
        READONLY = 'readonly'
        self.OptionInverse.configure(state=READONLY)
        self.OptionInverse.configure(takefocus="")
        self.OptionInverse.set("inverse of matrix")

        self.ButtonAdd = Button(self.LabelframeOperation)
        self.ButtonAdd.place(relx=0.419, rely=0.099, height=33, width=73
                , bordermode='ignore')
        self.ButtonAdd.configure(activebackground="#d9d9d9")
        self.ButtonAdd.configure(activeforeground="#000000")
        self.ButtonAdd.configure(background="lawn green")
        self.ButtonAdd.configure(disabledforeground="#a3a3a3")
        self.ButtonAdd.configure(foreground="#000000")
        self.ButtonAdd.configure(highlightbackground="#d9d9d9")
        self.ButtonAdd.configure(highlightcolor="black")
        self.ButtonAdd.configure(pady="0")
        self.ButtonAdd.configure(text='''Calculate''')
        self.ButtonAdd.configure(command = lambda : self.add())

        self.ButtonSubtract = Button(self.LabelframeOperation)
        self.ButtonSubtract.place(relx=0.419, rely=0.218, height=33, width=73
                , bordermode='ignore')
        self.ButtonSubtract.configure(activebackground="#d9d9d9")
        self.ButtonSubtract.configure(activeforeground="#000000")
        self.ButtonSubtract.configure(background="lawn green")
        self.ButtonSubtract.configure(disabledforeground="#a3a3a3")
        self.ButtonSubtract.configure(foreground="#000000")
        self.ButtonSubtract.configure(highlightbackground="#d9d9d9")
        self.ButtonSubtract.configure(highlightcolor="black")
        self.ButtonSubtract.configure(pady="0")
        self.ButtonSubtract.configure(text='''Calculate''')
        self.ButtonSubtract.configure(command = lambda : self.subtract())

        self.ButtonMultiply = Button(self.LabelframeOperation)
        self.ButtonMultiply.place(relx=0.419, rely=0.337, height=33, width=73
                , bordermode='ignore')
        self.ButtonMultiply.configure(activebackground="#d9d9d9")
        self.ButtonMultiply.configure(activeforeground="#000000")
        self.ButtonMultiply.configure(background="lawn green")
        self.ButtonMultiply.configure(disabledforeground="#a3a3a3")
        self.ButtonMultiply.configure(foreground="#000000")
        self.ButtonMultiply.configure(highlightbackground="#d9d9d9")
        self.ButtonMultiply.configure(highlightcolor="black")
        self.ButtonMultiply.configure(pady="0")
        self.ButtonMultiply.configure(text='''Calculate''')
        self.ButtonMultiply.configure(command = lambda : self.multiply())

        self.ButtonDet = Button(self.LabelframeOperation)
        self.ButtonDet.place(relx=0.419, rely=0.455, height=33, width=73
                , bordermode='ignore')
        self.ButtonDet.configure(activebackground="#d9d9d9")
        self.ButtonDet.configure(activeforeground="#000000")
        self.ButtonDet.configure(background="lawn green")
        self.ButtonDet.configure(disabledforeground="#a3a3a3")
        self.ButtonDet.configure(foreground="#000000")
        self.ButtonDet.configure(highlightbackground="#d9d9d9")
        self.ButtonDet.configure(highlightcolor="black")
        self.ButtonDet.configure(pady="0")
        self.ButtonDet.configure(text='''Calculate''')
        self.ButtonDet.configure(command = lambda : self.determinant())

        self.ButtonInverse = Button(self.LabelframeOperation)
        self.ButtonInverse.place(relx=0.419, rely=0.574, height=33, width=73
                , bordermode='ignore')
        self.ButtonInverse.configure(activebackground="#d9d9d9")
        self.ButtonInverse.configure(activeforeground="#000000")
        self.ButtonInverse.configure(background="lawn green")
        self.ButtonInverse.configure(disabledforeground="#a3a3a3")
        self.ButtonInverse.configure(foreground="#000000")
        self.ButtonInverse.configure(highlightbackground="#d9d9d9")
        self.ButtonInverse.configure(highlightcolor="black")
        self.ButtonInverse.configure(pady="0")
        self.ButtonInverse.configure(text='''Calculate''')
        self.ButtonInverse.configure(command = lambda : self.inverse())

        self.OptionScalar = ttk.Combobox(self.LabelframeOperation)
        self.OptionScalar.place(relx=0.048, rely=0.772, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["kxA","kxB",]
        self.OptionScalar.configure(values=self.value_list)
        self.OptionScalar.configure(font=font10)
        READONLY = 'readonly'
        self.OptionScalar.configure(state=READONLY)
        self.OptionScalar.configure(takefocus="")
        self.OptionScalar.set("constant with matrix")

        self.ButtonScalar = Button(self.LabelframeOperation)
        self.ButtonScalar.place(relx=0.419, rely=0.772, height=33, width=73
                , bordermode='ignore')
        self.ButtonScalar.configure(activebackground="#d9d9d9")
        self.ButtonScalar.configure(activeforeground="#000000")
        self.ButtonScalar.configure(background="lawn green")
        self.ButtonScalar.configure(disabledforeground="#a3a3a3")
        self.ButtonScalar.configure(foreground="#000000")
        self.ButtonScalar.configure(highlightbackground="#d9d9d9")
        self.ButtonScalar.configure(highlightcolor="black")
        self.ButtonScalar.configure(pady="0")
        self.ButtonScalar.configure(text='''Calculate''')
        self.ButtonScalar.configure(command = lambda : self.scaling())

        self.LabelMultiply = Label(self.LabelframeOperation)
        self.LabelMultiply.place(relx=0.113, rely=0.673, height=29, width=109
                , bordermode='ignore')
        self.LabelMultiply.configure(activebackground="#f9f9f9")
        self.LabelMultiply.configure(activeforeground="black")
        self.LabelMultiply.configure(background="deep sky blue")
        self.LabelMultiply.configure(disabledforeground="#a3a3a3")
        self.LabelMultiply.configure(font=font9)
        self.LabelMultiply.configure(foreground="#000000")
        self.LabelMultiply.configure(highlightbackground="#d9d9d9")
        self.LabelMultiply.configure(highlightcolor="black")
        self.LabelMultiply.configure(text='''multiply by :''')

        self.EntryConstant = Entry(self.LabelframeOperation)
        self.EntryConstant.place(relx=0.29, rely=0.673, height=40, relwidth=0.081
                , bordermode='ignore')
        self.EntryConstant.configure(background="white")
        self.EntryConstant.configure(disabledforeground="#a3a3a3")
        self.EntryConstant.configure(font=font11)
        self.EntryConstant.configure(foreground="#000000")
        self.EntryConstant.configure(highlightbackground="#d9d9d9")
        self.EntryConstant.configure(highlightcolor="black")
        self.EntryConstant.configure(insertbackground="black")
        self.EntryConstant.configure(justify=CENTER)
        self.EntryConstant.configure(selectbackground="#c4c4c4")
        self.EntryConstant.configure(selectforeground="black")

        self.OptionTriProduct = ttk.Combobox(self.LabelframeOperation)
        self.OptionTriProduct.place(relx=0.048, rely=0.871, relheight=0.065
                , relwidth=0.323, bordermode='ignore')
        self.value_list = ["-----------select-----------", "triple product of matrix A","triple product of matrix B",]
        self.OptionTriProduct.configure(values=self.value_list)
        self.OptionTriProduct.configure(font=font10)
        READONLY = 'readonly'
        self.OptionTriProduct.configure(state=READONLY)
        self.OptionTriProduct.configure(takefocus="")
        self.OptionTriProduct.set("triple product of matrix")

        self.ButtonTri = Button(self.LabelframeOperation)
        self.ButtonTri.place(relx=0.419, rely=0.871, height=33, width=73
                , bordermode='ignore')
        self.ButtonTri.configure(activebackground="#d9d9d9")
        self.ButtonTri.configure(activeforeground="#000000")
        self.ButtonTri.configure(background="lawn green")
        self.ButtonTri.configure(disabledforeground="#a3a3a3")
        self.ButtonTri.configure(foreground="#000000")
        self.ButtonTri.configure(highlightbackground="#d9d9d9")
        self.ButtonTri.configure(highlightcolor="black")
        self.ButtonTri.configure(pady="0")
        self.ButtonTri.configure(text='''Calculate''')
        self.ButtonTri.configure(command = lambda : self.tripleProduct())

        self.showAnswer = Label(self.LabelframeOperation)
        self.showAnswer.place(relx=0.565, rely=0.356, height=186, width=262
                              , bordermode='ignore')
        self.showAnswer.configure(activebackground="#f9f9f9")
        self.showAnswer.configure(activeforeground="black")
        self.showAnswer.configure(background="#ffffff")
        self.showAnswer.configure(disabledforeground="#a3a3a3")
        self.showAnswer.configure(font=font12)
        self.showAnswer.configure(foreground="#000000")
        self.showAnswer.configure(highlightbackground="#d9d9d9")
        self.showAnswer.configure(highlightcolor="black")

        self.tripleMatrix = Label(self.LabelframeOperation)
        self.tripleMatrix.place(relx=0.590, rely=0.079, height=126, width=230
                                , bordermode='ignore')
        self.tripleMatrix.configure(activebackground="#f9f9f9")
        self.tripleMatrix.configure(activeforeground="black")
        self.tripleMatrix.configure(anchor=W)
        self.tripleMatrix.configure(background="deep sky blue")
        self.tripleMatrix.configure(disabledforeground="#a3a3a3")
        self.tripleMatrix.configure(font=font11)
        self.tripleMatrix.configure(foreground="#000000")
        self.tripleMatrix.configure(highlightbackground="#d9d9d9")
        self.tripleMatrix.configure(highlightcolor="black")
        self.tripleMatrix.configure(width=262)
        self.tripleMatrix.configure(justify = LEFT)

    def pointAnB(self):
        self.A = np.array([[None, None, None], [None, None, None], [None, None, None]])
        self.B = np.array([[None, None, None], [None, None, None], [None, None, None]])
        if len(self.EntryA_1.get() or self.EntryA_2.get() or self.EntryA_3.get() or self.EntryA_4.get() or self.EntryA_5.get() or self.EntryA_6.get() or self.EntryA_7.get() or self.EntryA_8.get() or self.EntryA_9.get())==0:
            self.showAnswer.configure(text = "fill matrix A completely")
        else:
            self.A[0, 0] = float(self.EntryA_1.get())
            self.A[0, 1] = float(self.EntryA_2.get())
            self.A[0, 2] = float(self.EntryA_3.get())
            self.A[1, 0] = float(self.EntryA_4.get())
            self.A[1, 1] = float(self.EntryA_5.get())
            self.A[1, 2] = float(self.EntryA_6.get())
            self.A[2, 0] = float(self.EntryA_7.get())
            self.A[2, 1] = float(self.EntryA_8.get())
            self.A[2, 2] = float(self.EntryA_9.get())

        if len(self.EntryB_1.get() or self.EntryB_2.get() or self.EntryB_3.get() or self.EntryB_4.get() or self.EntryB_5.get() or self.EntryB_6.get() or self.EntryB_7.get() or self.EntryB_8.get() or self.EntryB_9.get()) == 0:
            self.showAnswer.configure(text = "fill matrix B completely")
        else:
            self.B[0, 0] = float(self.EntryB_1.get())
            self.B[0, 1] = float(self.EntryB_2.get())
            self.B[0, 2] = float(self.EntryB_3.get())
            self.B[1, 0] = float(self.EntryB_4.get())
            self.B[1, 1] = float(self.EntryB_5.get())
            self.B[1, 2] = float(self.EntryB_6.get())
            self.B[2, 0] = float(self.EntryB_7.get())
            self.B[2, 1] = float(self.EntryB_8.get())
            self.B[2, 2] = float(self.EntryB_9.get())

    def add(self):
        self.pointAnB()
        if self.OptionAdd.get()=="A+B":
            ans = self.A + self.B
            self.showAnswer.configure(text = ans)
        else:
            messagebox.showinfo("no selection", "please select an addition order")

    def subtract(self):
        self.pointAnB()
        if self.OptionSubtract.get()=="A-B":
            ans = self.A - self.B
            self.showAnswer.configure(text = ans)
        elif self.OptionSubtract.get()=="B-A":
            ans = self.B - self.A
            self.showAnswer.configure(text = ans)
        else:
            messagebox.showinfo("no selection", "please select a subtraction order")

    def multiply(self):
        self.pointAnB()
        if self.OptionMultiply.get()=="AxB":
            ans = np.dot(self.A, self.B)
            self.showAnswer.configure(text = ans)
        elif self.OptionMultiply.get() =="BxA":
            ans = np.dot(self.B, self.A)
            self.showAnswer.configure(text = ans)
        else:
            messagebox.showinfo("no selection", "please select a multiply order")

    def determinant(self):
        self.pointAnB()
        if self.OptionDet.get()=="Determinant of A":
            ans = round(np.linalg.det(np.matrix(self.A, dtype=float)), 2)
            self.showAnswer.configure(text=ans)
        elif self.OptionDet.get()=="Determinant of B":
            ans = round(np.linalg.det(np.matrix(self.B, dtype=float)), 2)
            self.showAnswer.configure(text=ans)
        else:
            messagebox.showinfo("no selection", "please select matrix for determinant")

    def inverse(self):
        self.pointAnB()
        detA = round(np.linalg.det(np.matrix(self.A, dtype=float)), 2)
        detB = round(np.linalg.det(np.matrix(self.B, dtype=float)), 2)

        if self.OptionInverse.get()=="inverse of A":
            if detA ==0:
                self.showAnswer.configure(text="the determinant is 0, \nmatrix is not invertible")
            else:
                ans = np.matrix.round(np.linalg.inv(np.matrix(self.A, dtype=float)), 2)
                self.showAnswer.configure(text=ans)
        elif self.OptionInverse.get()=="inverse of B":
            if detB==0:
                self.showAnswer.configure(text="the determinant is 0, \nmatrix is not invertible")
            else:
                ans = np.matrix.round(np.linalg.inv(np.matrix(self.B, dtype=float)), 2)
                self.showAnswer.configure(text=ans)
        else:
            messagebox.showinfo("no selection", "please select matrix for inverse")

    def scaling(self):
        self.pointAnB()
        k = float(self.EntryConstant.get())
        if self.OptionScalar.get()=="kxA":
            ans = k * np.matrix(self.A)
            self.showAnswer.configure(text= ans)
        elif self.OptionScalar.get()=="kxB":
            ans = k * np.matrix(self.B)
            self.showAnswer.configure(text= ans)
        else:
            messagebox.showinfo("no selection", "please select matrix for scaling")

    def clearA(self): #clear entry and data
        self.A[0, 0] = None
        self.A[0, 1] = None
        self.A[0, 2] = None
        self.A[1, 0] = None
        self.A[1, 1] = None
        self.A[1, 2] = None
        self.A[2, 0] = None
        self.A[2, 1] = None
        self.A[2, 2] = None
        self.EntryA_1.delete(0, END)
        self.EntryA_2.delete(0, END)
        self.EntryA_3.delete(0, END)
        self.EntryA_4.delete(0, END)
        self.EntryA_5.delete(0, END)
        self.EntryA_6.delete(0, END)
        self.EntryA_7.delete(0, END)
        self.EntryA_8.delete(0, END)
        self.EntryA_9.delete(0, END)

    def clearB(self):
        self.B[0, 0] = None
        self.B[0, 1] = None
        self.B[0, 2] = None
        self.B[1, 0] = None
        self.B[1, 1] = None
        self.B[1, 2] = None
        self.B[2, 0] = None
        self.B[2, 1] = None
        self.B[2, 2] = None
        self.EntryB_1.delete(0, END)
        self.EntryB_2.delete(0, END)
        self.EntryB_3.delete(0, END)
        self.EntryB_4.delete(0, END)
        self.EntryB_5.delete(0, END)
        self.EntryB_6.delete(0, END)
        self.EntryB_7.delete(0, END)
        self.EntryB_8.delete(0, END)
        self.EntryB_9.delete(0, END)

    def tripleProduct(self):
        self.pointAnB()
        if self.OptionTriProduct.get()=="triple product of matrix A":
            self.tripleMatrix.configure(text ="vectors:" +"\na = ("+ str(self.A[0,0]) +
                                              ", " + str(self.A[0,1])+", "+ str(self.A[0,2])+" )"
                                        +"\nb = ("+ str(self.A[1,0]) +
                                              ", " + str(self.A[1,1])+", "+ str(self.A[1,2])+" )"
                                        +"\nc = ("+ str(self.A[2,0]) +
                                              ", " + str(self.A[2,1])+", "+ str(self.A[2,2])+" )")
            ans = self.A[0,0]*(self.A[1,1]*self.A[2,2]-self.A[1,2]*self.A[2,1]) - self.A[0,1]*(self.A[1,0]*self.A[2,2]-self.A[1,2]*self.A[2,0]) + self.A[0,2]*(self.A[1,0]*self.A[2,1]-self.A[1,1]*self.A[2,0])
            self.showAnswer.configure(text = 'a x (b x c)= '+str(ans))
        elif self.OptionTriProduct.get()=="triple product of matrix B":
            self.tripleMatrix.configure(text ="vectors:" +"\na = ("+ str(self.B[0,0]) +
                                              ", " + str(self.B[0,1])+", "+ str(self.B[0,2])+" )"
                                        +"\nb = ("+ str(self.B[1,0]) +
                                              ", " + str(self.B[1,1])+", "+ str(self.B[1,2])+" )"
                                        +"\nc = ("+ str(self.B[2,0]) +
                                              ", " + str(self.B[2,1])+", "+ str(self.B[2,2])+" )")
            ans = self.B[0, 0] * (self.A[1, 1] * self.B[2, 2] - self.B[1, 2] * self.B[2, 1]) - \
                  self.B[0, 1] * (self.B[1, 0] * self.B[2, 2] - self.B[1, 2] * self.B[2, 0]) + \
                  self.B[0, 2] * (self.B[1, 0] * self.B[2, 1] - self.B[1, 1] * self.B[2, 0])
            self.showAnswer.configure(text='a x (b x c)= ' + str(ans))
        else:
            messagebox.showinfo("no selection", "choose matrix for triple product")

    def openBasicCal(self):
        root.destroy()
        Cal.vp_start_gui()

    def openVector(self):
        root.destroy()
        Vec.vp_start_gui()

    def openVector3d(self):
        root.destroy()
        Vec3.vp_start_gui()

    def to_2by2(self):
        root.destroy()
        mat2.vp_start_gui()

    def to_4by4(self):
        root.destroy()
        mat4.vp_start_gui()

    def openAbout(self):
        ab.vp_start_gui()

    def btoMain(self):
        root.destroy()
        mm.vp_start_gui()

    def to_st(self):
        root.destroy()
        st.vp_start_gui()

    def to_ct(self):
        root.destroy()
        ct.vp_start_gui()

    def to_r3d(self):
        root.destroy()
        r3d.vp_start_gui()

    def when_closing(self):
        if messagebox.askyesno('My Vector and Matrix Calculator', 'Do you really want to quit?'):
            sys.exit()
        else:
            pass






if __name__ == '__main__':
    vp_start_gui()



