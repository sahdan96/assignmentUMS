#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 07, 2018 01:17:11 PM CST  platform: Windows NT

import sys
from math import*
from tkinter import messagebox
from winsound import *
import basicCalt as Cal
import Vector2 as Vec
import matrix2 as mat2
import matrix3by3 as mat3
import matrix4by4 as mat4
import about as ab
import main_menu as mm
import  series_transform as st
import Vector3d as Vec3
import rotation_3d as r3d

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    root.resizable(width=False, height=False)
    PlaySound(None, SND_PURGE)
    root.protocol("WM_DELETE_WINDOW", top.when_closing)
    root.iconbitmap("icon.ico")
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.font10 = "-family {Courier New} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        self.font11 = "-family {Segoe UI} -size 28 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font12 = "-family {Segoe UI} -size 24 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font14 = "-family {Segoe UI} -size 15 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font15 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font18 = "-family {Segoe UI} -size 11 -weight normal -slant "  \
            "italic -underline 0 -overstrike 0"
        self.font19 = "-family {Segoe UI} -size 30 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.font9 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1100x615+300+100")
        top.title("My Vector and Matrix Calculator")
        top.configure(background="black")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.mode = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.mode,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Mode")
        self.mode.add_command(command=lambda: self.openBasicCal(),
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Standard Calculator")
        self.allMatMenu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.allMatMenu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Matrix Calculator")

        self.allMatMenu.add_command(command=lambda: self.to_2by2(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 2x2")

        self.allMatMenu.add_command(command=lambda: self.to_3by3(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 3x3")

        self.allMatMenu.add_command(command=lambda: self.to_4by4(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 4x4")

        self.allMatMenu.add_command(command=lambda: self.to_r3d(),
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="3D rotation")

        self.vector_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.vector_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Vector Calculator")

        self.vector_menu.add_command(command=lambda: self.openVector(),
                                     activebackground="#d9d9d9",
                                     activeforeground="#000000",
                                     background="#d9d9d9",
                                     font="TkMenuFont",
                                     foreground="#000000",
                                     label="2D vector")

        self.vector_menu.add_command(command=lambda: self.openVector3d(),
                                     activebackground="#d9d9d9",
                                     activeforeground="#000000",
                                     background="#d9d9d9",
                                     font="TkMenuFont",
                                     foreground="#000000",
                                     label="3D vector")

        self.trans_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.trans_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Transformation")

        self.trans_menu.add_command(command=lambda: self.to_st(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="series transformation")

        self.trans_menu.add_command(
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="composite transformation")

        self.menubar.add_command(command=lambda: self.openAbout(),
                                 activebackground="#d8d8d8",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="About")

        self.b2menu = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.b2menu,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Navigate")

        self.b2menu.add_command(command=lambda: self.btoMain(),
                                activebackground="#d9d9d9",
                                activeforeground="#000000",
                                background="#d9d9d9",
                                font="TkMenuFont",
                                foreground="#000000",
                                label="back to main menu")

        self.LabelframeTitle = LabelFrame(top)
        self.LabelframeTitle.place(relx=0.009, rely=0.016, relheight=0.966
                , relwidth=0.98)
        self.LabelframeTitle.configure(relief=GROOVE)
        self.LabelframeTitle.configure(borderwidth="1")
        self.LabelframeTitle.configure(font=self.font14)
        self.LabelframeTitle.configure(foreground="black")
        self.LabelframeTitle.configure(labelanchor="n")
        self.LabelframeTitle.configure(text='''Composite Transformation''')
        self.LabelframeTitle.configure(background="orange1")
        self.LabelframeTitle.configure(highlightbackground="#d9d9d9")
        self.LabelframeTitle.configure(highlightcolor="black")
        self.LabelframeTitle.configure(width=1080)

        self.Label_yourP = Label(self.LabelframeTitle)
        self.Label_yourP.place(relx=0.074, rely=0.084, height=35, width=105
                , bordermode='ignore')
        self.Label_yourP.configure(activebackground="#f9f9f9")
        self.Label_yourP.configure(activeforeground="black")
        self.Label_yourP.configure(background="orange1")
        self.Label_yourP.configure(disabledforeground="#a3a3a3")
        self.Label_yourP.configure(font=self.font9)
        self.Label_yourP.configure(foreground="#000000")
        self.Label_yourP.configure(highlightbackground="#d9d9d9")
        self.Label_yourP.configure(highlightcolor="black")
        self.Label_yourP.configure(text='''your point :''')

        self.Label3 = Label(self.LabelframeTitle)
        self.Label3.place(relx=0.028, rely=0.151, height=55, width=200
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="orange1")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=self.font19)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''(      ,      )''')

        self.EntryPx = Entry(self.LabelframeTitle)
        self.EntryPx.place(relx=0.065, rely=0.168, height=40, relwidth=0.046
                , bordermode='ignore')
        self.EntryPx.configure(background="white")
        self.EntryPx.configure(disabledforeground="#a3a3a3")
        self.EntryPx.configure(font=self.font10)
        self.EntryPx.configure(foreground="#000000")
        self.EntryPx.configure(highlightbackground="#d9d9d9")
        self.EntryPx.configure(highlightcolor="black")
        self.EntryPx.configure(insertbackground="black")
        self.EntryPx.configure(justify=CENTER)
        self.EntryPx.configure(selectbackground="#c4c4c4")
        self.EntryPx.configure(selectforeground="black")

        self.EntryPy = Entry(self.LabelframeTitle)
        self.EntryPy.place(relx=0.13, rely=0.168, height=40, relwidth=0.046
                , bordermode='ignore')
        self.EntryPy.configure(background="white")
        self.EntryPy.configure(disabledforeground="#a3a3a3")
        self.EntryPy.configure(font=self.font10)
        self.EntryPy.configure(foreground="#000000")
        self.EntryPy.configure(highlightbackground="#d9d9d9")
        self.EntryPy.configure(highlightcolor="black")
        self.EntryPy.configure(insertbackground="black")
        self.EntryPy.configure(justify=CENTER)
        self.EntryPy.configure(selectbackground="#c4c4c4")
        self.EntryPy.configure(selectforeground="black")

        self.arrow1 = Label(self.LabelframeTitle)
        self.arrow1.place(relx=0.102, rely=0.286, height=50, width=40
                , bordermode='ignore')
        self.arrow1.configure(activebackground="#f9f9f9")
        self.arrow1.configure(activeforeground="black")
        self.arrow1.configure(background="orange1")
        self.arrow1.configure(disabledforeground="#a3a3a3")
        self.arrow1.configure(font=self.font12)
        self.arrow1.configure(foreground="#000000")
        self.arrow1.configure(highlightbackground="#d9d9d9")
        self.arrow1.configure(highlightcolor="black")
        self.arrow1.configure(text=u"\u2193")

        self.Label1stOutput = Label(self.LabelframeTitle)
        self.Label1stOutput.place(relx=0.009, rely=0.37, height=35, width=240
                , bordermode='ignore')
        self.Label1stOutput.configure(activebackground="#f9f9f9")
        self.Label1stOutput.configure(activeforeground="black")
        self.Label1stOutput.configure(background="orange1")
        self.Label1stOutput.configure(disabledforeground="#a3a3a3")
        self.Label1stOutput.configure(font=self.font9)
        self.Label1stOutput.configure(foreground="#000000")
        self.Label1stOutput.configure(highlightbackground="#d9d9d9")
        self.Label1stOutput.configure(highlightcolor="black")
        self.Label1stOutput.configure(text='''first transformation output''')

        self.Box1stAns = Label(self.LabelframeTitle)
        self.Box1stAns.place(relx=0.028, rely=0.437, height=40, width=200
                             , bordermode='ignore')
        self.Box1stAns.configure(activebackground="#f9f9f9")
        self.Box1stAns.configure(activeforeground="black")
        self.Box1stAns.configure(background="olivedrab1")
        self.Box1stAns.configure(disabledforeground="#a3a3a3")
        self.Box1stAns.configure(font=self.font9)
        self.Box1stAns.configure(foreground="#000000")
        self.Box1stAns.configure(highlightbackground="#d9d9d9")
        self.Box1stAns.configure(highlightcolor="black")

        self.arrow2 = Label(self.LabelframeTitle)
        self.arrow2.place(relx=0.102, rely=0.538, height=50, width=40
                , bordermode='ignore')
        self.arrow2.configure(activebackground="#f9f9f9")
        self.arrow2.configure(activeforeground="black")
        self.arrow2.configure(background="orange1")
        self.arrow2.configure(disabledforeground="#a3a3a3")
        self.arrow2.configure(font=self.font12)
        self.arrow2.configure(foreground="#000000")
        self.arrow2.configure(highlightbackground="#d9d9d9")
        self.arrow2.configure(highlightcolor="black")
        self.arrow2.configure(text=u"\u2193")

        self.Label2ndOutput = Label(self.LabelframeTitle)
        self.Label2ndOutput.place(relx=0.009, rely=0.622, height=35, width=240
                , bordermode='ignore')
        self.Label2ndOutput.configure(activebackground="#f9f9f9")
        self.Label2ndOutput.configure(activeforeground="black")
        self.Label2ndOutput.configure(background="orange1")
        self.Label2ndOutput.configure(disabledforeground="#a3a3a3")
        self.Label2ndOutput.configure(font=self.font9)
        self.Label2ndOutput.configure(foreground="#000000")
        self.Label2ndOutput.configure(highlightbackground="#d9d9d9")
        self.Label2ndOutput.configure(highlightcolor="black")
        self.Label2ndOutput.configure(text='''final transformation output''')

        self.Box2ndAns = Label(self.LabelframeTitle)
        self.Box2ndAns.place(relx=0.028, rely=0.689, height=40, width=200
                , bordermode='ignore')
        self.Box2ndAns.configure(activebackground="#f9f9f9")
        self.Box2ndAns.configure(activeforeground="black")
        self.Box2ndAns.configure(background="olivedrab1")
        self.Box2ndAns.configure(disabledforeground="#a3a3a3")
        self.Box2ndAns.configure(font=self.font9)
        self.Box2ndAns.configure(foreground="#000000")
        self.Box2ndAns.configure(highlightbackground="#d9d9d9")
        self.Box2ndAns.configure(highlightcolor="black")

        self.Labelframe4 = LabelFrame(self.LabelframeTitle)
        self.Labelframe4.place(relx=0.25, rely=0.067, relheight=0.916
                , relwidth=0.741, bordermode='ignore')
        self.Labelframe4.configure(relief=GROOVE)
        self.Labelframe4.configure(font=self.font9)
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(labelanchor="n")
        self.Labelframe4.configure(text='''Operation''')
        self.Labelframe4.configure(background="cyan")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")
        self.Labelframe4.configure(width=800)

        self.TLabel1 = ttk.Label(self.Labelframe4)
        self.TLabel1.place(relx=0.038, rely=0.055, height=50, width=715
                , bordermode='ignore')
        self.TLabel1.configure(background="cyan")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font=self.font15)
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(anchor=W)
        self.TLabel1.configure(text='''      first                                                                         , then''')
        self.TLabel1.configure(width=715)

        self.TCombobox1 = ttk.Combobox(self.Labelframe4)
        self.TCombobox1.place(relx=0.125, rely=0.073, relheight=0.055
                , relwidth=0.225, bordermode='ignore')
        self.value_list = ["---select---","translate","rotate","reflect","scaling","shear",]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(font=self.font9)
        self.TCombobox1.configure(justify=CENTER)
        READONLY = 'readonly'
        self.TCombobox1.configure(state=READONLY)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.current(0)

        self.TCombobox2 = ttk.Combobox(self.Labelframe4)
        self.TCombobox2.place(relx=0.544, rely=0.073, relheight=0.055
                , relwidth=0.225, bordermode='ignore')
        self.value_list = ["---select---","translate","rotate","reflect","scaling","shear",]
        self.TCombobox2.configure(values=self.value_list)
        self.TCombobox2.configure(font=self.font9)
        self.TCombobox2.configure(justify=CENTER)
        READONLY = 'readonly'
        self.TCombobox2.configure(state=READONLY)
        self.TCombobox2.configure(takefocus="")
        self.TCombobox2.current(0)

        self.TButtonSelect1 = ttk.Button(self.Labelframe4)
        self.TButtonSelect1.place(relx=0.369, rely=0.073, height=30, width=60
                                  , bordermode='ignore')
        self.TButtonSelect1.configure(takefocus="")
        self.TButtonSelect1.configure(text='''select''')
        self.TButtonSelect1.configure(command = lambda : self.multiSelection1())

        self.TButton1 = ttk.Button(self.Labelframe4)
        self.TButton1.place(relx=0.8, rely=0.073, height=30, width=60
                , bordermode='ignore')
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''select''')
        self.TButton1.configure(width=138)
        self.TButton1.configure(command = lambda : self.multiSelection2())

    def multiSelection1(self):
        if self.TCombobox1.get()=="translate":
            self.translation1_ui()

        elif self.TCombobox1.get()=="rotate":
            self.rotation1_ui()

        elif self.TCombobox1.get()=="reflect":
            self.reflection1_ui()

        elif self.TCombobox1.get()=="scaling":
            self.scaling1_ui()

        elif self.TCombobox1.get()=="shear":
            self.shear1_ui()
        else:
            messagebox.showinfo("selection", "please select any transformation type")

    def multiSelection2(self):
        if self.TCombobox2.get()=="translate":
            self.translation2_ui()

        elif self.TCombobox2.get()=="rotate":
            self.rotation2_ui()

        elif self.TCombobox2.get()=="reflect":
            self.reflection2_ui()

        elif self.TCombobox2.get()=="scaling":
            self.scaling2_ui()

        elif self.TCombobox2.get()=="shear":
            self.shear2_ui()

        else:
            messagebox.showinfo("selection", "whoops, no selection selected")

    #***************************UI method*********************************
    def translation1_ui(self):
        self.LabelframeTranslate1 = LabelFrame(self.Labelframe4)
        self.LabelframeTranslate1.place(relx=0.013, rely=0.147, relheight=0.826
                                        , relwidth=0.475, bordermode='ignore')
        self.LabelframeTranslate1.configure(relief=GROOVE)
        self.LabelframeTranslate1.configure(borderwidth="1")
        self.LabelframeTranslate1.configure(font=self.font18)
        self.LabelframeTranslate1.configure(foreground="black")
        self.LabelframeTranslate1.configure(text='''Translation''')
        self.LabelframeTranslate1.configure(background="cyan")
        self.LabelframeTranslate1.configure(width=320)

        self.LabelEnterVect = Label(self.LabelframeTranslate1)
        self.LabelEnterVect.place(relx=0.171, rely=0.067, height=45, width=250
                                  , bordermode='ignore')
        self.LabelEnterVect.configure(background="cyan")
        self.LabelEnterVect.configure(disabledforeground="#a3a3a3")
        self.LabelEnterVect.configure(font=self.font9)
        self.LabelEnterVect.configure(foreground="#000000")
        self.LabelEnterVect.configure(text='''enter the vector to translate''')
        self.LabelEnterVect.configure(width=252)

        self.LabelPvect = Label(self.LabelframeTranslate1)
        self.LabelPvect.place(relx=0.105, rely=0.156, height=70, width=300
                              , bordermode='ignore')
        self.LabelPvect.configure(anchor=N)
        self.LabelPvect.configure(background="cyan")
        self.LabelPvect.configure(disabledforeground="#a3a3a3")
        self.LabelPvect.configure(font=self.font19)
        self.LabelPvect.configure(foreground="#000000")
        self.LabelPvect.configure(text='''(       ,        )''')
        self.LabelPvect.configure(width=300)

        self.EntryVx = Entry(self.LabelframeTranslate1)
        self.EntryVx.place(relx=0.316, rely=0.189, height=40, relwidth=0.132
                           , bordermode='ignore')
        self.EntryVx.configure(background="white")
        self.EntryVx.configure(disabledforeground="#a3a3a3")
        self.EntryVx.configure(font=self.font10)
        self.EntryVx.configure(foreground="#000000")
        self.EntryVx.configure(highlightbackground="#d9d9d9")
        self.EntryVx.configure(highlightcolor="black")
        self.EntryVx.configure(insertbackground="black")
        self.EntryVx.configure(justify=CENTER)
        self.EntryVx.configure(selectbackground="#c4c4c4")
        self.EntryVx.configure(selectforeground="black")

        self.EntryVy = Entry(self.LabelframeTranslate1)
        self.EntryVy.place(relx=0.579, rely=0.189, height=40, relwidth=0.132
                           , bordermode='ignore')
        self.EntryVy.configure(background="white")
        self.EntryVy.configure(disabledforeground="#a3a3a3")
        self.EntryVy.configure(font=self.font10)
        self.EntryVy.configure(foreground="#000000")
        self.EntryVy.configure(highlightbackground="#d9d9d9")
        self.EntryVy.configure(highlightcolor="black")
        self.EntryVy.configure(insertbackground="black")
        self.EntryVy.configure(justify=CENTER)
        self.EntryVy.configure(selectbackground="#c4c4c4")
        self.EntryVy.configure(selectforeground="black")

        self.ButtonTranslate = Button(self.LabelframeTranslate1)
        self.ButtonTranslate.place(relx=0.395, rely=0.4, height=40, width=80
                                   , bordermode='ignore')
        self.ButtonTranslate.configure(activebackground="#d9d9d9")
        self.ButtonTranslate.configure(activeforeground="#000000")
        self.ButtonTranslate.configure(background="#d9d9d9")
        self.ButtonTranslate.configure(disabledforeground="#a3a3a3")
        self.ButtonTranslate.configure(font=self.font9)
        self.ButtonTranslate.configure(foreground="#000000")
        self.ButtonTranslate.configure(highlightbackground="#d9d9d9")
        self.ButtonTranslate.configure(highlightcolor="black")
        self.ButtonTranslate.configure(pady="0")
        self.ButtonTranslate.configure(text='''translate''')
        self.ButtonTranslate.configure(command = lambda : self.translation1_calculation())

    def translation2_ui(self):
        self.LabelframeTranslate2 = LabelFrame(self.Labelframe4)
        self.LabelframeTranslate2.place(relx=0.513, rely=0.147, relheight=0.826
                                        , relwidth=0.475, bordermode='ignore')
        self.LabelframeTranslate2.configure(relief=GROOVE)
        self.LabelframeTranslate2.configure(borderwidth="1")
        self.LabelframeTranslate2.configure(font=self.font18)
        self.LabelframeTranslate2.configure(foreground="black")
        self.LabelframeTranslate2.configure(text='''Translation''')
        self.LabelframeTranslate2.configure(background="cyan")
        self.LabelframeTranslate2.configure(highlightbackground="#d9d9d9")
        self.LabelframeTranslate2.configure(highlightcolor="black")
        self.LabelframeTranslate2.configure(width=320)

        self.LabelEnterVect2 = Label(self.LabelframeTranslate2)
        self.LabelEnterVect2.place(relx=0.171, rely=0.067, height=45, width=250
                                   , bordermode='ignore')
        self.LabelEnterVect2.configure(activebackground="#f9f9f9")
        self.LabelEnterVect2.configure(activeforeground="black")
        self.LabelEnterVect2.configure(background="cyan")
        self.LabelEnterVect2.configure(disabledforeground="#a3a3a3")
        self.LabelEnterVect2.configure(font=self.font9)
        self.LabelEnterVect2.configure(foreground="#000000")
        self.LabelEnterVect2.configure(highlightbackground="#d9d9d9")
        self.LabelEnterVect2.configure(highlightcolor="black")
        self.LabelEnterVect2.configure(text='''enter the vector to translate''')

        self.LabelPvect2 = Label(self.LabelframeTranslate2)
        self.LabelPvect2.place(relx=0.105, rely=0.156, height=70, width=300
                               , bordermode='ignore')
        self.LabelPvect2.configure(activebackground="#f9f9f9")
        self.LabelPvect2.configure(activeforeground="black")
        self.LabelPvect2.configure(anchor=N)
        self.LabelPvect2.configure(background="cyan")
        self.LabelPvect2.configure(disabledforeground="#a3a3a3")
        self.LabelPvect2.configure(font=self.font19)
        self.LabelPvect2.configure(foreground="#000000")
        self.LabelPvect2.configure(highlightbackground="#d9d9d9")
        self.LabelPvect2.configure(highlightcolor="black")
        self.LabelPvect2.configure(text='''(       ,        )''')

        self.EntryVx2 = Entry(self.LabelframeTranslate2)
        self.EntryVx2.place(relx=0.316, rely=0.189, height=40, relwidth=0.132
                            , bordermode='ignore')
        self.EntryVx2.configure(background="white")
        self.EntryVx2.configure(disabledforeground="#a3a3a3")
        self.EntryVx2.configure(font=self.font10)
        self.EntryVx2.configure(foreground="#000000")
        self.EntryVx2.configure(highlightbackground="#d9d9d9")
        self.EntryVx2.configure(highlightcolor="black")
        self.EntryVx2.configure(insertbackground="black")
        self.EntryVx2.configure(justify=CENTER)
        self.EntryVx2.configure(selectbackground="#c4c4c4")
        self.EntryVx2.configure(selectforeground="black")

        self.EntryVy2 = Entry(self.LabelframeTranslate2)
        self.EntryVy2.place(relx=0.579, rely=0.189, height=40, relwidth=0.132
                            , bordermode='ignore')
        self.EntryVy2.configure(background="white")
        self.EntryVy2.configure(disabledforeground="#a3a3a3")
        self.EntryVy2.configure(font=self.font10)
        self.EntryVy2.configure(foreground="#000000")
        self.EntryVy2.configure(highlightbackground="#d9d9d9")
        self.EntryVy2.configure(highlightcolor="black")
        self.EntryVy2.configure(insertbackground="black")
        self.EntryVy2.configure(justify=CENTER)
        self.EntryVy2.configure(selectbackground="#c4c4c4")
        self.EntryVy2.configure(selectforeground="black")

        self.ButtonTranslate2 = Button(self.LabelframeTranslate2)
        self.ButtonTranslate2.place(relx=0.395, rely=0.4, height=40, width=80
                                    , bordermode='ignore')
        self.ButtonTranslate2.configure(activebackground="#d9d9d9")
        self.ButtonTranslate2.configure(activeforeground="#000000")
        self.ButtonTranslate2.configure(background="#d9d9d9")
        self.ButtonTranslate2.configure(disabledforeground="#a3a3a3")
        self.ButtonTranslate2.configure(font=self.font9)
        self.ButtonTranslate2.configure(foreground="#000000")
        self.ButtonTranslate2.configure(highlightbackground="#d9d9d9")
        self.ButtonTranslate2.configure(highlightcolor="black")
        self.ButtonTranslate2.configure(pady="0")
        self.ButtonTranslate2.configure(text='''translate''')
        self.ButtonTranslate2.configure(command = lambda : self.translation2_calculation())

    def rotation1_ui(self):
        self.LabelframeRotation1 = LabelFrame(self.Labelframe4)
        self.LabelframeRotation1.place(relx=0.013, rely=0.147, relheight=0.826
                                       , relwidth=0.475, bordermode='ignore')
        self.LabelframeRotation1.configure(relief=GROOVE)
        self.LabelframeRotation1.configure(borderwidth="1")
        self.LabelframeRotation1.configure(font=self.font18)
        self.LabelframeRotation1.configure(foreground="black")
        self.LabelframeRotation1.configure(text='''Rotation''')
        self.LabelframeRotation1.configure(background="cyan")
        self.LabelframeRotation1.configure(highlightbackground="#d9d9d9")
        self.LabelframeRotation1.configure(highlightcolor="black")
        self.LabelframeRotation1.configure(width=320)

        self.LabelEnterAngle = Label(self.LabelframeRotation1)
        self.LabelEnterAngle.place(relx=0.171, rely=0.067, height=62, width=250
                                   , bordermode='ignore')
        self.LabelEnterAngle.configure(background="cyan")
        self.LabelEnterAngle.configure(disabledforeground="#a3a3a3")
        self.LabelEnterAngle.configure(font=self.font9)
        self.LabelEnterAngle.configure(foreground="#000000")
        self.LabelEnterAngle.configure(text='''enter angle to rotate\n(-ve angle for anti-clockwise)''')

        self.EntryAngle1 = Entry(self.LabelframeRotation1)
        self.EntryAngle1.place(relx=0.421, rely=0.222, height=40, relwidth=0.158
                               , bordermode='ignore')
        self.EntryAngle1.configure(background="white")
        self.EntryAngle1.configure(disabledforeground="#a3a3a3")
        self.EntryAngle1.configure(font=self.font10)
        self.EntryAngle1.configure(foreground="#000000")
        self.EntryAngle1.configure(insertbackground="black")
        self.EntryAngle1.configure(justify=CENTER)

        self.LabelAngleOrigin = Label(self.LabelframeRotation1)
        self.LabelAngleOrigin.place(relx=0.342, rely=0.422, height=34, width=120
                                    , bordermode='ignore')
        self.LabelAngleOrigin.configure(background="cyan")
        self.LabelAngleOrigin.configure(disabledforeground="#a3a3a3")
        self.LabelAngleOrigin.configure(font=self.font9)
        self.LabelAngleOrigin.configure(foreground="#000000")
        self.LabelAngleOrigin.configure(text='''rotate origin''')

        self.LabelPR1 = Label(self.LabelframeRotation1)
        self.LabelPR1.place(relx=0.289, rely=0.511, height=55, width=160
                            , bordermode='ignore')
        self.LabelPR1.configure(background="cyan")
        self.LabelPR1.configure(disabledforeground="#a3a3a3")
        self.LabelPR1.configure(font=self.font19)
        self.LabelPR1.configure(foreground="#000000")
        self.LabelPR1.configure(text='''(      ,      )''')
        self.LabelPR1.configure(width=159)

        self.EntryRoX = Entry(self.LabelframeRotation1)
        self.EntryRoX.place(relx=0.342, rely=0.533, height=40, relwidth=0.132
                            , bordermode='ignore')
        self.EntryRoX.configure(background="white")
        self.EntryRoX.configure(disabledforeground="#a3a3a3")
        self.EntryRoX.configure(font=self.font10)
        self.EntryRoX.configure(foreground="#000000")
        self.EntryRoX.configure(insertbackground="black")
        self.EntryRoX.configure(justify=CENTER)

        self.EntryRoy = Entry(self.LabelframeRotation1)
        self.EntryRoy.place(relx=0.526, rely=0.533, height=40, relwidth=0.132
                            , bordermode='ignore')
        self.EntryRoy.configure(background="white")
        self.EntryRoy.configure(disabledforeground="#a3a3a3")
        self.EntryRoy.configure(font=self.font10)
        self.EntryRoy.configure(foreground="#000000")
        self.EntryRoy.configure(insertbackground="black")
        self.EntryRoy.configure(justify=CENTER)

        self.ButtonRotate = Button(self.LabelframeRotation1)
        self.ButtonRotate.place(relx=0.395, rely=0.8, height=40, width=80
                                , bordermode='ignore')
        self.ButtonRotate.configure(activebackground="#d9d9d9")
        self.ButtonRotate.configure(activeforeground="#000000")
        self.ButtonRotate.configure(background="#d9d9d9")
        self.ButtonRotate.configure(disabledforeground="#a3a3a3")
        self.ButtonRotate.configure(font=self.font9)
        self.ButtonRotate.configure(foreground="#000000")
        self.ButtonRotate.configure(highlightbackground="#d9d9d9")
        self.ButtonRotate.configure(highlightcolor="black")
        self.ButtonRotate.configure(pady="0")
        self.ButtonRotate.configure(text='''rotate''')
        self.ButtonRotate.configure(command = lambda : self.rotation1_calculation())

    def rotation2_ui(self):
        self.LabelframeRotation2 = LabelFrame(self.Labelframe4)
        self.LabelframeRotation2.place(relx=0.513, rely=0.147, relheight=0.826
                                       , relwidth=0.475, bordermode='ignore')
        self.LabelframeRotation2.configure(relief=GROOVE)
        self.LabelframeRotation2.configure(borderwidth="1")
        self.LabelframeRotation2.configure(font=self.font18)
        self.LabelframeRotation2.configure(foreground="black")
        self.LabelframeRotation2.configure(text='''Rotation''')
        self.LabelframeRotation2.configure(background="cyan")
        self.LabelframeRotation2.configure(highlightbackground="#d9d9d9")
        self.LabelframeRotation2.configure(highlightcolor="black")
        self.LabelframeRotation2.configure(width=320)

        self.LabelEnterAngle2 = Label(self.LabelframeRotation2)
        self.LabelEnterAngle2.place(relx=0.171, rely=0.067, height=62, width=250
                                    , bordermode='ignore')
        self.LabelEnterAngle2.configure(activebackground="#f9f9f9")
        self.LabelEnterAngle2.configure(activeforeground="black")
        self.LabelEnterAngle2.configure(background="cyan")
        self.LabelEnterAngle2.configure(disabledforeground="#a3a3a3")
        self.LabelEnterAngle2.configure(font=self.font9)
        self.LabelEnterAngle2.configure(foreground="#000000")
        self.LabelEnterAngle2.configure(highlightbackground="#d9d9d9")
        self.LabelEnterAngle2.configure(highlightcolor="black")
        self.LabelEnterAngle2.configure(text='''enter angle to rotate\n(-ve angle for anti-clockwise)''')

        self.EntryAngle2 = Entry(self.LabelframeRotation2)
        self.EntryAngle2.place(relx=0.421, rely=0.222, height=40, relwidth=0.158
                               , bordermode='ignore')
        self.EntryAngle2.configure(background="white")
        self.EntryAngle2.configure(disabledforeground="#a3a3a3")
        self.EntryAngle2.configure(font=self.font10)
        self.EntryAngle2.configure(foreground="#000000")
        self.EntryAngle2.configure(highlightbackground="#d9d9d9")
        self.EntryAngle2.configure(highlightcolor="black")
        self.EntryAngle2.configure(insertbackground="black")
        self.EntryAngle2.configure(justify=CENTER)
        self.EntryAngle2.configure(selectbackground="#c4c4c4")
        self.EntryAngle2.configure(selectforeground="black")

        self.LabelAngleOrigin2 = Label(self.LabelframeRotation2)
        self.LabelAngleOrigin2.place(relx=0.342, rely=0.422, height=34, width=120
                                     , bordermode='ignore')
        self.LabelAngleOrigin2.configure(activebackground="#f9f9f9")
        self.LabelAngleOrigin2.configure(activeforeground="black")
        self.LabelAngleOrigin2.configure(background="cyan")
        self.LabelAngleOrigin2.configure(disabledforeground="#a3a3a3")
        self.LabelAngleOrigin2.configure(font=self.font9)
        self.LabelAngleOrigin2.configure(foreground="#000000")
        self.LabelAngleOrigin2.configure(highlightbackground="#d9d9d9")
        self.LabelAngleOrigin2.configure(highlightcolor="black")
        self.LabelAngleOrigin2.configure(text='''rotate origin''')

        self.LabelPR2 = Label(self.LabelframeRotation2)
        self.LabelPR2.place(relx=0.289, rely=0.511, height=55, width=160
                            , bordermode='ignore')
        self.LabelPR2.configure(activebackground="#f9f9f9")
        self.LabelPR2.configure(activeforeground="black")
        self.LabelPR2.configure(background="cyan")
        self.LabelPR2.configure(disabledforeground="#a3a3a3")
        self.LabelPR2.configure(font=self.font19)
        self.LabelPR2.configure(foreground="#000000")
        self.LabelPR2.configure(highlightbackground="#d9d9d9")
        self.LabelPR2.configure(highlightcolor="black")
        self.LabelPR2.configure(text='''(      ,      )''')

        self.EntryRoX2 = Entry(self.LabelframeRotation2)
        self.EntryRoX2.place(relx=0.342, rely=0.533, height=40, relwidth=0.132
                             , bordermode='ignore')
        self.EntryRoX2.configure(background="white")
        self.EntryRoX2.configure(disabledforeground="#a3a3a3")
        self.EntryRoX2.configure(font=self.font10)
        self.EntryRoX2.configure(foreground="#000000")
        self.EntryRoX2.configure(highlightbackground="#d9d9d9")
        self.EntryRoX2.configure(highlightcolor="black")
        self.EntryRoX2.configure(insertbackground="black")
        self.EntryRoX2.configure(justify=CENTER)
        self.EntryRoX2.configure(selectbackground="#c4c4c4")
        self.EntryRoX2.configure(selectforeground="black")

        self.EntryRoy2 = Entry(self.LabelframeRotation2)
        self.EntryRoy2.place(relx=0.526, rely=0.533, height=40, relwidth=0.132
                             , bordermode='ignore')
        self.EntryRoy2.configure(background="white")
        self.EntryRoy2.configure(disabledforeground="#a3a3a3")
        self.EntryRoy2.configure(font=self.font10)
        self.EntryRoy2.configure(foreground="#000000")
        self.EntryRoy2.configure(highlightbackground="#d9d9d9")
        self.EntryRoy2.configure(highlightcolor="black")
        self.EntryRoy2.configure(insertbackground="black")
        self.EntryRoy2.configure(justify=CENTER)
        self.EntryRoy2.configure(selectbackground="#c4c4c4")
        self.EntryRoy2.configure(selectforeground="black")

        self.ButtonRotate2 = Button(self.LabelframeRotation2)
        self.ButtonRotate2.place(relx=0.395, rely=0.8, height=40, width=80
                                 , bordermode='ignore')
        self.ButtonRotate2.configure(activebackground="#d9d9d9")
        self.ButtonRotate2.configure(activeforeground="#000000")
        self.ButtonRotate2.configure(background="#d9d9d9")
        self.ButtonRotate2.configure(disabledforeground="#a3a3a3")
        self.ButtonRotate2.configure(font=self.font9)
        self.ButtonRotate2.configure(foreground="#000000")
        self.ButtonRotate2.configure(highlightbackground="#d9d9d9")
        self.ButtonRotate2.configure(highlightcolor="black")
        self.ButtonRotate2.configure(pady="0")
        self.ButtonRotate2.configure(text='''rotate''')
        self.ButtonRotate2.configure(command = lambda : self.rotation2_calculation())

    def reflection1_ui(self):
        self.LabelframeReflection1 = LabelFrame(self.Labelframe4)
        self.LabelframeReflection1.place(relx=0.013, rely=0.147, relheight=0.826
                                         , relwidth=0.475, bordermode='ignore')
        self.LabelframeReflection1.configure(relief=GROOVE)
        self.LabelframeReflection1.configure(borderwidth="1")
        self.LabelframeReflection1.configure(font=self.font18)
        self.LabelframeReflection1.configure(foreground="black")
        self.LabelframeReflection1.configure(text='''Reflection''')
        self.LabelframeReflection1.configure(background="cyan")
        self.LabelframeReflection1.configure(highlightbackground="#d9d9d9")
        self.LabelframeReflection1.configure(highlightcolor="black")
        self.LabelframeReflection1.configure(width=320)

        self.B_reflectYaxis = Button(self.LabelframeReflection1)
        self.B_reflectYaxis.place(relx=0.25, rely=0.067, height=40, width=190
                                  , bordermode='ignore')
        self.B_reflectYaxis.configure(activebackground="#d9d9d9")
        self.B_reflectYaxis.configure(activeforeground="#000000")
        self.B_reflectYaxis.configure(background="#d9d9d9")
        self.B_reflectYaxis.configure(disabledforeground="#a3a3a3")
        self.B_reflectYaxis.configure(font=self.font9)
        self.B_reflectYaxis.configure(foreground="#000000")
        self.B_reflectYaxis.configure(highlightbackground="#d9d9d9")
        self.B_reflectYaxis.configure(highlightcolor="black")
        self.B_reflectYaxis.configure(pady="0")
        self.B_reflectYaxis.configure(text='''reflection in the y-axis''')
        self.B_reflectYaxis.configure(command = lambda : self.reflection1_yaxis())

        self.B_reflectXaxis = Button(self.LabelframeReflection1)
        self.B_reflectXaxis.place(relx=0.25, rely=0.178, height=40, width=190
                                  , bordermode='ignore')
        self.B_reflectXaxis.configure(activebackground="#d9d9d9")
        self.B_reflectXaxis.configure(activeforeground="#000000")
        self.B_reflectXaxis.configure(background="#d9d9d9")
        self.B_reflectXaxis.configure(disabledforeground="#a3a3a3")
        self.B_reflectXaxis.configure(font=self.font9)
        self.B_reflectXaxis.configure(foreground="#000000")
        self.B_reflectXaxis.configure(highlightbackground="#d9d9d9")
        self.B_reflectXaxis.configure(highlightcolor="black")
        self.B_reflectXaxis.configure(pady="0")
        self.B_reflectXaxis.configure(text='''reflect in the x-axis''')
        self.B_reflectXaxis.configure(command = lambda : self.reflection1_xaxis())

        self.B_reflectOrigin = Button(self.LabelframeReflection1)
        self.B_reflectOrigin.place(relx=0.25, rely=0.289, height=40, width=190
                                   , bordermode='ignore')
        self.B_reflectOrigin.configure(activebackground="#d9d9d9")
        self.B_reflectOrigin.configure(activeforeground="#000000")
        self.B_reflectOrigin.configure(background="#d9d9d9")
        self.B_reflectOrigin.configure(disabledforeground="#a3a3a3")
        self.B_reflectOrigin.configure(font=self.font9)
        self.B_reflectOrigin.configure(foreground="#000000")
        self.B_reflectOrigin.configure(highlightbackground="#d9d9d9")
        self.B_reflectOrigin.configure(highlightcolor="black")
        self.B_reflectOrigin.configure(pady="0")
        self.B_reflectOrigin.configure(text='''reflect in the origin''')
        self.B_reflectOrigin.configure(command = lambda : self.reflection1_origin())

        self.LabelR_lineY = Label(self.LabelframeReflection1)
        self.LabelR_lineY.place(relx=0.026, rely=0.422, height=36, width=302
                                , bordermode='ignore')
        self.LabelR_lineY.configure(anchor=SW)
        self.LabelR_lineY.configure(background="cyan")
        self.LabelR_lineY.configure(disabledforeground="#a3a3a3")
        self.LabelR_lineY.configure(font=self.font9)
        self.LabelR_lineY.configure(foreground="#000000")
        self.LabelR_lineY.configure(text='''reflect in the line y=              x+''')
        self.LabelR_lineY.configure(width=302)

        self.EntryR_m = Entry(self.LabelframeReflection1)
        self.EntryR_m.place(relx=0.421, rely=0.422, height=40, relwidth=0.105
                            , bordermode='ignore')
        self.EntryR_m.configure(background="white")
        self.EntryR_m.configure(disabledforeground="#a3a3a3")
        self.EntryR_m.configure(font=self.font10)
        self.EntryR_m.configure(foreground="#000000")
        self.EntryR_m.configure(insertbackground="black")
        self.EntryR_m.configure(width=114)
        self.EntryR_m.configure(justify= CENTER)

        self.EntryR_c = Entry(self.LabelframeReflection1)
        self.EntryR_c.place(relx=0.605, rely=0.422, height=40, relwidth=0.105
                            , bordermode='ignore')
        self.EntryR_c.configure(background="white")
        self.EntryR_c.configure(disabledforeground="#a3a3a3")
        self.EntryR_c.configure(font=self.font10)
        self.EntryR_c.configure(foreground="#000000")
        self.EntryR_c.configure(highlightbackground="#d9d9d9")
        self.EntryR_c.configure(highlightcolor="black")
        self.EntryR_c.configure(insertbackground="black")
        self.EntryR_c.configure(selectbackground="#c4c4c4")
        self.EntryR_c.configure(selectforeground="black")
        self.EntryR_c.configure(justify=CENTER)

        self.LabelR_lineX = Label(self.LabelframeReflection1)
        self.LabelR_lineX.place(relx=0.158, rely=0.689, height=34, width=150
                                , bordermode='ignore')
        self.LabelR_lineX.configure(anchor=SW)
        self.LabelR_lineX.configure(background="cyan")
        self.LabelR_lineX.configure(disabledforeground="#a3a3a3")
        self.LabelR_lineX.configure(font=self.font9)
        self.LabelR_lineX.configure(foreground="#000000")
        self.LabelR_lineX.configure(text='''reflect in line x =''')

        self.B_reflectLiney = Button(self.LabelframeReflection1)
        self.B_reflectLiney.place(relx=0.447, rely=0.556, height=40, width=80
                                  , bordermode='ignore')
        self.B_reflectLiney.configure(activebackground="#d9d9d9")
        self.B_reflectLiney.configure(activeforeground="#000000")
        self.B_reflectLiney.configure(background="#d9d9d9")
        self.B_reflectLiney.configure(disabledforeground="#a3a3a3")
        self.B_reflectLiney.configure(font=self.font9)
        self.B_reflectLiney.configure(foreground="#000000")
        self.B_reflectLiney.configure(highlightbackground="#d9d9d9")
        self.B_reflectLiney.configure(highlightcolor="black")
        self.B_reflectLiney.configure(pady="0")
        self.B_reflectLiney.configure(text='''reflect''')
        self.B_reflectLiney.configure(command = lambda : self.reflection1_lineY())

        self.EntryR_x = Entry(self.LabelframeReflection1)
        self.EntryR_x.place(relx=0.5, rely=0.689, height=40, relwidth=0.105
                            , bordermode='ignore')
        self.EntryR_x.configure(background="white")
        self.EntryR_x.configure(disabledforeground="#a3a3a3")
        self.EntryR_x.configure(font=self.font10)
        self.EntryR_x.configure(foreground="#000000")
        self.EntryR_x.configure(highlightbackground="#d9d9d9")
        self.EntryR_x.configure(highlightcolor="black")
        self.EntryR_x.configure(insertbackground="black")
        self.EntryR_x.configure(selectbackground="#c4c4c4")
        self.EntryR_x.configure(selectforeground="black")
        self.EntryR_x.configure(justify=CENTER)

        self.B_reflectLinex = Button(self.LabelframeReflection1)
        self.B_reflectLinex.place(relx=0.447, rely=0.822, height=40, width=80
                                  , bordermode='ignore')
        self.B_reflectLinex.configure(activebackground="#d9d9d9")
        self.B_reflectLinex.configure(activeforeground="#000000")
        self.B_reflectLinex.configure(background="#d9d9d9")
        self.B_reflectLinex.configure(disabledforeground="#a3a3a3")
        self.B_reflectLinex.configure(font=self.font9)
        self.B_reflectLinex.configure(foreground="#000000")
        self.B_reflectLinex.configure(highlightbackground="#d9d9d9")
        self.B_reflectLinex.configure(highlightcolor="black")
        self.B_reflectLinex.configure(pady="0")
        self.B_reflectLinex.configure(text='''reflect''')
        self.B_reflectLinex.configure(command = lambda : self.reflection1_lineX())

    def reflection2_ui(self):
        self.LabelframeReflection2 = LabelFrame(self.Labelframe4)
        self.LabelframeReflection2.place(relx=0.513, rely=0.147
                                         , relheight=0.826, relwidth=0.475, bordermode='ignore')
        self.LabelframeReflection2.configure(relief=GROOVE)
        self.LabelframeReflection2.configure(borderwidth="1")
        self.LabelframeReflection2.configure(font=self.font18)
        self.LabelframeReflection2.configure(foreground="black")
        self.LabelframeReflection2.configure(text='''Reflection''')
        self.LabelframeReflection2.configure(background="cyan")
        self.LabelframeReflection2.configure(highlightbackground="#d9d9d9")
        self.LabelframeReflection2.configure(highlightcolor="black")
        self.LabelframeReflection2.configure(width=320)

        self.B_reflectYaxis2 = Button(self.LabelframeReflection2)
        self.B_reflectYaxis2.place(relx=0.25, rely=0.067, height=40, width=190
                                   , bordermode='ignore')
        self.B_reflectYaxis2.configure(activebackground="#d9d9d9")
        self.B_reflectYaxis2.configure(activeforeground="#000000")
        self.B_reflectYaxis2.configure(background="#d9d9d9")
        self.B_reflectYaxis2.configure(disabledforeground="#a3a3a3")
        self.B_reflectYaxis2.configure(font=self.font9)
        self.B_reflectYaxis2.configure(foreground="#000000")
        self.B_reflectYaxis2.configure(highlightbackground="#d9d9d9")
        self.B_reflectYaxis2.configure(highlightcolor="black")
        self.B_reflectYaxis2.configure(pady="0")
        self.B_reflectYaxis2.configure(text='''reflection in the y-axis''')
        self.B_reflectYaxis2.configure(command = lambda : self.reflection2_yaxis())

        self.B_reflectXaxis2 = Button(self.LabelframeReflection2)
        self.B_reflectXaxis2.place(relx=0.25, rely=0.178, height=40, width=190
                                   , bordermode='ignore')
        self.B_reflectXaxis2.configure(activebackground="#d9d9d9")
        self.B_reflectXaxis2.configure(activeforeground="#000000")
        self.B_reflectXaxis2.configure(background="#d9d9d9")
        self.B_reflectXaxis2.configure(disabledforeground="#a3a3a3")
        self.B_reflectXaxis2.configure(font=self.font9)
        self.B_reflectXaxis2.configure(foreground="#000000")
        self.B_reflectXaxis2.configure(highlightbackground="#d9d9d9")
        self.B_reflectXaxis2.configure(highlightcolor="black")
        self.B_reflectXaxis2.configure(pady="0")
        self.B_reflectXaxis2.configure(text='''reflect in the x-axis''')
        self.B_reflectXaxis2.configure(command = lambda : self.reflection2_xaxis())

        self.B_reflectOrigin2 = Button(self.LabelframeReflection2)
        self.B_reflectOrigin2.place(relx=0.263, rely=0.289, height=40, width=190
                                    , bordermode='ignore')
        self.B_reflectOrigin2.configure(activebackground="#d9d9d9")
        self.B_reflectOrigin2.configure(activeforeground="#000000")
        self.B_reflectOrigin2.configure(background="#d9d9d9")
        self.B_reflectOrigin2.configure(disabledforeground="#a3a3a3")
        self.B_reflectOrigin2.configure(font=self.font9)
        self.B_reflectOrigin2.configure(foreground="#000000")
        self.B_reflectOrigin2.configure(highlightbackground="#d9d9d9")
        self.B_reflectOrigin2.configure(highlightcolor="black")
        self.B_reflectOrigin2.configure(pady="0")
        self.B_reflectOrigin2.configure(text='''reflect in the origin''')
        self.B_reflectOrigin2.configure(command = lambda : self.reflection2_origin())

        self.LabelR_lineY2 = Label(self.LabelframeReflection2)
        self.LabelR_lineY2.place(relx=0.026, rely=0.422, height=36, width=302
                                 , bordermode='ignore')
        self.LabelR_lineY2.configure(activebackground="#f9f9f9")
        self.LabelR_lineY2.configure(activeforeground="black")
        self.LabelR_lineY2.configure(anchor=SW)
        self.LabelR_lineY2.configure(background="cyan")
        self.LabelR_lineY2.configure(disabledforeground="#a3a3a3")
        self.LabelR_lineY2.configure(font=self.font9)
        self.LabelR_lineY2.configure(foreground="#000000")
        self.LabelR_lineY2.configure(highlightbackground="#d9d9d9")
        self.LabelR_lineY2.configure(highlightcolor="black")
        self.LabelR_lineY2.configure(text='''reflect in the line y=              x+''')

        self.EntryR_m2 = Entry(self.LabelframeReflection2)
        self.EntryR_m2.place(relx=0.421, rely=0.422, height=40, relwidth=0.105
                             , bordermode='ignore')
        self.EntryR_m2.configure(background="white")
        self.EntryR_m2.configure(disabledforeground="#a3a3a3")
        self.EntryR_m2.configure(font=self.font10)
        self.EntryR_m2.configure(foreground="#000000")
        self.EntryR_m2.configure(highlightbackground="#d9d9d9")
        self.EntryR_m2.configure(highlightcolor="black")
        self.EntryR_m2.configure(insertbackground="black")
        self.EntryR_m2.configure(selectbackground="#c4c4c4")
        self.EntryR_m2.configure(selectforeground="black")
        self.EntryR_m2.configure(justify=CENTER)

        self.EntryR_c2 = Entry(self.LabelframeReflection2)
        self.EntryR_c2.place(relx=0.605, rely=0.422, height=40, relwidth=0.105
                             , bordermode='ignore')
        self.EntryR_c2.configure(background="white")
        self.EntryR_c2.configure(disabledforeground="#a3a3a3")
        self.EntryR_c2.configure(font=self.font10)
        self.EntryR_c2.configure(foreground="#000000")
        self.EntryR_c2.configure(highlightbackground="#d9d9d9")
        self.EntryR_c2.configure(highlightcolor="black")
        self.EntryR_c2.configure(insertbackground="black")
        self.EntryR_c2.configure(selectbackground="#c4c4c4")
        self.EntryR_c2.configure(selectforeground="black")
        self.EntryR_c2.configure(justify=CENTER)

        self.LabelR_lineX2 = Label(self.LabelframeReflection2)
        self.LabelR_lineX2.place(relx=0.158, rely=0.689, height=34, width=150
                                 , bordermode='ignore')
        self.LabelR_lineX2.configure(activebackground="#f9f9f9")
        self.LabelR_lineX2.configure(activeforeground="black")
        self.LabelR_lineX2.configure(anchor=SW)
        self.LabelR_lineX2.configure(background="cyan")
        self.LabelR_lineX2.configure(disabledforeground="#a3a3a3")
        self.LabelR_lineX2.configure(font=self.font9)
        self.LabelR_lineX2.configure(foreground="#000000")
        self.LabelR_lineX2.configure(highlightbackground="#d9d9d9")
        self.LabelR_lineX2.configure(highlightcolor="black")
        self.LabelR_lineX2.configure(text='''reflect in line x =''')

        self.B_reflectLiney2 = Button(self.LabelframeReflection2)
        self.B_reflectLiney2.place(relx=0.447, rely=0.556, height=40, width=80
                                   , bordermode='ignore')
        self.B_reflectLiney2.configure(activebackground="#d9d9d9")
        self.B_reflectLiney2.configure(activeforeground="#000000")
        self.B_reflectLiney2.configure(background="#d9d9d9")
        self.B_reflectLiney2.configure(disabledforeground="#a3a3a3")
        self.B_reflectLiney2.configure(font=self.font9)
        self.B_reflectLiney2.configure(foreground="#000000")
        self.B_reflectLiney2.configure(highlightbackground="#d9d9d9")
        self.B_reflectLiney2.configure(highlightcolor="black")
        self.B_reflectLiney2.configure(pady="0")
        self.B_reflectLiney2.configure(text='''reflect''')
        self.B_reflectLiney2.configure(command = lambda : self.reflection2_lineY())

        self.EntryR_x2 = Entry(self.LabelframeReflection2)
        self.EntryR_x2.place(relx=0.5, rely=0.689, height=40, relwidth=0.105
                             , bordermode='ignore')
        self.EntryR_x2.configure(background="white")
        self.EntryR_x2.configure(disabledforeground="#a3a3a3")
        self.EntryR_x2.configure(font=self.font10)
        self.EntryR_x2.configure(foreground="#000000")
        self.EntryR_x2.configure(highlightbackground="#d9d9d9")
        self.EntryR_x2.configure(highlightcolor="black")
        self.EntryR_x2.configure(insertbackground="black")
        self.EntryR_x2.configure(selectbackground="#c4c4c4")
        self.EntryR_x2.configure(selectforeground="black")
        self.EntryR_x2.configure(justify=CENTER)

        self.B_reflectLinex2 = Button(self.LabelframeReflection2)
        self.B_reflectLinex2.place(relx=0.447, rely=0.822, height=40, width=80
                                   , bordermode='ignore')
        self.B_reflectLinex2.configure(activebackground="#d9d9d9")
        self.B_reflectLinex2.configure(activeforeground="#000000")
        self.B_reflectLinex2.configure(background="#d9d9d9")
        self.B_reflectLinex2.configure(disabledforeground="#a3a3a3")
        self.B_reflectLinex2.configure(font=self.font9)
        self.B_reflectLinex2.configure(foreground="#000000")
        self.B_reflectLinex2.configure(highlightbackground="#d9d9d9")
        self.B_reflectLinex2.configure(highlightcolor="black")
        self.B_reflectLinex2.configure(pady="0")
        self.B_reflectLinex2.configure(text='''reflect''')
        self.B_reflectLinex2.configure(command = lambda : self.reflection2_lineX())

    def scaling1_ui(self):
        self.LabelframeScaling1 = LabelFrame(self.Labelframe4)
        self.LabelframeScaling1.place(relx=0.013, rely=0.147, relheight=0.826
                                      , relwidth=0.475, bordermode='ignore')
        self.LabelframeScaling1.configure(relief=GROOVE)
        self.LabelframeScaling1.configure(borderwidth="1")
        self.LabelframeScaling1.configure(font=self.font18)
        self.LabelframeScaling1.configure(foreground="black")
        self.LabelframeScaling1.configure(text='''Scaling''')
        self.LabelframeScaling1.configure(background="cyan")
        self.LabelframeScaling1.configure(highlightbackground="#d9d9d9")
        self.LabelframeScaling1.configure(highlightcolor="black")
        self.LabelframeScaling1.configure(width=320)

        self.LabelScaleFac = Label(self.LabelframeScaling1)
        self.LabelScaleFac.place(relx=0.158, rely=0.111, height=34, width=107
                                 , bordermode='ignore')
        self.LabelScaleFac.configure(background="cyan")
        self.LabelScaleFac.configure(disabledforeground="#a3a3a3")
        self.LabelScaleFac.configure(font=self.font9)
        self.LabelScaleFac.configure(foreground="#000000")
        self.LabelScaleFac.configure(text='''Scale factor''')

        self.EntryScale_fac = Entry(self.LabelframeScaling1)
        self.EntryScale_fac.place(relx=0.447, rely=0.111, height=40
                                  , relwidth=0.132, bordermode='ignore')
        self.EntryScale_fac.configure(background="white")
        self.EntryScale_fac.configure(disabledforeground="#a3a3a3")
        self.EntryScale_fac.configure(font=self.font10)
        self.EntryScale_fac.configure(foreground="#000000")
        self.EntryScale_fac.configure(insertbackground="black")
        self.EntryScale_fac.configure(justify=CENTER)

        self.LabelPS = Label(self.LabelframeScaling1)
        self.LabelPS.place(relx=0.342, rely=0.267, height=60, width=200
                           , bordermode='ignore')
        self.LabelPS.configure(activebackground="#f9f9f9")
        self.LabelPS.configure(activeforeground="black")
        self.LabelPS.configure(background="cyan")
        self.LabelPS.configure(disabledforeground="#a3a3a3")
        self.LabelPS.configure(font=self.font19)
        self.LabelPS.configure(foreground="#000000")
        self.LabelPS.configure(highlightbackground="#d9d9d9")
        self.LabelPS.configure(highlightcolor="black")
        self.LabelPS.configure(text='''(      ,      )''')
        self.LabelPS.configure(width=223)

        self.EntryScale_Ox = Entry(self.LabelframeScaling1)
        self.EntryScale_Ox.place(relx=0.447, rely=0.3, height=40, relwidth=0.132
                                 , bordermode='ignore')
        self.EntryScale_Ox.configure(background="white")
        self.EntryScale_Ox.configure(disabledforeground="#a3a3a3")
        self.EntryScale_Ox.configure(font=self.font10)
        self.EntryScale_Ox.configure(foreground="#000000")
        self.EntryScale_Ox.configure(highlightbackground="#d9d9d9")
        self.EntryScale_Ox.configure(highlightcolor="black")
        self.EntryScale_Ox.configure(insertbackground="black")
        self.EntryScale_Ox.configure(justify=CENTER)
        self.EntryScale_Ox.configure(selectbackground="#c4c4c4")
        self.EntryScale_Ox.configure(selectforeground="black")

        self.EntryScale_Oy = Entry(self.LabelframeScaling1)
        self.EntryScale_Oy.place(relx=0.632, rely=0.3, height=40, relwidth=0.132
                                 , bordermode='ignore')
        self.EntryScale_Oy.configure(background="white")
        self.EntryScale_Oy.configure(disabledforeground="#a3a3a3")
        self.EntryScale_Oy.configure(font=self.font10)
        self.EntryScale_Oy.configure(foreground="#000000")
        self.EntryScale_Oy.configure(highlightbackground="#d9d9d9")
        self.EntryScale_Oy.configure(highlightcolor="black")
        self.EntryScale_Oy.configure(insertbackground="black")
        self.EntryScale_Oy.configure(justify=CENTER)
        self.EntryScale_Oy.configure(selectbackground="#c4c4c4")
        self.EntryScale_Oy.configure(selectforeground="black")

        self.LabelScaleO = Label(self.LabelframeScaling1)
        self.LabelScaleO.place(relx=0.066, rely=0.311, height=34, width=120
                               , bordermode='ignore')
        self.LabelScaleO.configure(activebackground="#f9f9f9")
        self.LabelScaleO.configure(activeforeground="black")
        self.LabelScaleO.configure(background="cyan")
        self.LabelScaleO.configure(disabledforeground="#a3a3a3")
        self.LabelScaleO.configure(font=self.font9)
        self.LabelScaleO.configure(foreground="#000000")
        self.LabelScaleO.configure(highlightbackground="#d9d9d9")
        self.LabelScaleO.configure(highlightcolor="black")
        self.LabelScaleO.configure(text='''scaling origin''')

        self.B_scaleTransform = Button(self.LabelframeScaling1)
        self.B_scaleTransform.place(relx=0.447, rely=0.511, height=40, width=80
                                    , bordermode='ignore')
        self.B_scaleTransform.configure(activebackground="#d9d9d9")
        self.B_scaleTransform.configure(activeforeground="#000000")
        self.B_scaleTransform.configure(background="#d9d9d9")
        self.B_scaleTransform.configure(disabledforeground="#a3a3a3")
        self.B_scaleTransform.configure(font=self.font9)
        self.B_scaleTransform.configure(foreground="#000000")
        self.B_scaleTransform.configure(highlightbackground="#d9d9d9")
        self.B_scaleTransform.configure(highlightcolor="black")
        self.B_scaleTransform.configure(pady="0")
        self.B_scaleTransform.configure(text='''transform''')
        self.B_scaleTransform.configure(command = lambda : self.scaling1_calculation())

    def scaling2_ui(self):
        self.LabelframeScaling2 = LabelFrame(self.Labelframe4)
        self.LabelframeScaling2.place(relx=0.513, rely=0.147, relheight=0.826
                                      , relwidth=0.475, bordermode='ignore')
        self.LabelframeScaling2.configure(relief=GROOVE)
        self.LabelframeScaling2.configure(borderwidth="1")
        self.LabelframeScaling2.configure(font=self.font18)
        self.LabelframeScaling2.configure(foreground="black")
        self.LabelframeScaling2.configure(text='''Scaling''')
        self.LabelframeScaling2.configure(background="cyan")
        self.LabelframeScaling2.configure(highlightbackground="#d9d9d9")
        self.LabelframeScaling2.configure(highlightcolor="black")
        self.LabelframeScaling2.configure(width=320)

        self.LabelScaleFac2 = Label(self.LabelframeScaling2)
        self.LabelScaleFac2.place(relx=0.158, rely=0.111, height=34, width=107
                                  , bordermode='ignore')
        self.LabelScaleFac2.configure(activebackground="#f9f9f9")
        self.LabelScaleFac2.configure(activeforeground="black")
        self.LabelScaleFac2.configure(background="cyan")
        self.LabelScaleFac2.configure(disabledforeground="#a3a3a3")
        self.LabelScaleFac2.configure(font=self.font9)
        self.LabelScaleFac2.configure(foreground="#000000")
        self.LabelScaleFac2.configure(highlightbackground="#d9d9d9")
        self.LabelScaleFac2.configure(highlightcolor="black")
        self.LabelScaleFac2.configure(text='''Scale factor''')

        self.EntryScale_fac2 = Entry(self.LabelframeScaling2)
        self.EntryScale_fac2.place(relx=0.447, rely=0.111, height=40
                                   , relwidth=0.132, bordermode='ignore')
        self.EntryScale_fac2.configure(background="white")
        self.EntryScale_fac2.configure(disabledforeground="#a3a3a3")
        self.EntryScale_fac2.configure(font=self.font10)
        self.EntryScale_fac2.configure(foreground="#000000")
        self.EntryScale_fac2.configure(highlightbackground="#d9d9d9")
        self.EntryScale_fac2.configure(highlightcolor="black")
        self.EntryScale_fac2.configure(insertbackground="black")
        self.EntryScale_fac2.configure(justify=CENTER)
        self.EntryScale_fac2.configure(selectbackground="#c4c4c4")
        self.EntryScale_fac2.configure(selectforeground="black")

        self.LabelPS2 = Label(self.LabelframeScaling2)
        self.LabelPS2.place(relx=0.342, rely=0.267, height=60, width=200
                            , bordermode='ignore')
        self.LabelPS2.configure(activebackground="#f9f9f9")
        self.LabelPS2.configure(activeforeground="black")
        self.LabelPS2.configure(background="cyan")
        self.LabelPS2.configure(disabledforeground="#a3a3a3")
        self.LabelPS2.configure(font=self.font19)
        self.LabelPS2.configure(foreground="#000000")
        self.LabelPS2.configure(highlightbackground="#d9d9d9")
        self.LabelPS2.configure(highlightcolor="black")
        self.LabelPS2.configure(text='''(      ,      )''')

        self.EntryScale_Ox2 = Entry(self.LabelframeScaling2)
        self.EntryScale_Ox2.place(relx=0.447, rely=0.3, height=40, relwidth=0.132
                                  , bordermode='ignore')
        self.EntryScale_Ox2.configure(background="white")
        self.EntryScale_Ox2.configure(disabledforeground="#a3a3a3")
        self.EntryScale_Ox2.configure(font=self.font10)
        self.EntryScale_Ox2.configure(foreground="#000000")
        self.EntryScale_Ox2.configure(highlightbackground="#d9d9d9")
        self.EntryScale_Ox2.configure(highlightcolor="black")
        self.EntryScale_Ox2.configure(insertbackground="black")
        self.EntryScale_Ox2.configure(justify=CENTER)
        self.EntryScale_Ox2.configure(selectbackground="#c4c4c4")
        self.EntryScale_Ox2.configure(selectforeground="black")

        self.EntryScale_Oy2 = Entry(self.LabelframeScaling2)
        self.EntryScale_Oy2.place(relx=0.632, rely=0.3, height=40, relwidth=0.132
                                  , bordermode='ignore')
        self.EntryScale_Oy2.configure(background="white")
        self.EntryScale_Oy2.configure(disabledforeground="#a3a3a3")
        self.EntryScale_Oy2.configure(font=self.font10)
        self.EntryScale_Oy2.configure(foreground="#000000")
        self.EntryScale_Oy2.configure(highlightbackground="#d9d9d9")
        self.EntryScale_Oy2.configure(highlightcolor="black")
        self.EntryScale_Oy2.configure(insertbackground="black")
        self.EntryScale_Oy2.configure(justify=CENTER)
        self.EntryScale_Oy2.configure(selectbackground="#c4c4c4")
        self.EntryScale_Oy2.configure(selectforeground="black")

        self.LabelScaleO2 = Label(self.LabelframeScaling2)
        self.LabelScaleO2.place(relx=0.066, rely=0.311, height=34, width=120
                                , bordermode='ignore')
        self.LabelScaleO2.configure(activebackground="#f9f9f9")
        self.LabelScaleO2.configure(activeforeground="black")
        self.LabelScaleO2.configure(background="cyan")
        self.LabelScaleO2.configure(disabledforeground="#a3a3a3")
        self.LabelScaleO2.configure(font=self.font9)
        self.LabelScaleO2.configure(foreground="#000000")
        self.LabelScaleO2.configure(highlightbackground="#d9d9d9")
        self.LabelScaleO2.configure(highlightcolor="black")
        self.LabelScaleO2.configure(text='''scaling origin''')

        self.B_scaleTransform2 = Button(self.LabelframeScaling2)
        self.B_scaleTransform2.place(relx=0.447, rely=0.511, height=40, width=80
                                     , bordermode='ignore')
        self.B_scaleTransform2.configure(activebackground="#d9d9d9")
        self.B_scaleTransform2.configure(activeforeground="#000000")
        self.B_scaleTransform2.configure(background="#d9d9d9")
        self.B_scaleTransform2.configure(disabledforeground="#a3a3a3")
        self.B_scaleTransform2.configure(font=self.font9)
        self.B_scaleTransform2.configure(foreground="#000000")
        self.B_scaleTransform2.configure(highlightbackground="#d9d9d9")
        self.B_scaleTransform2.configure(highlightcolor="black")
        self.B_scaleTransform2.configure(pady="0")
        self.B_scaleTransform2.configure(text='''transform''')
        self.B_scaleTransform2.configure(command = lambda : self.scaling2_calculation())

    def shear1_ui(self):
        self.LabelframeShear1 = LabelFrame(self.Labelframe4)
        self.LabelframeShear1.place(relx=0.013, rely=0.147, relheight=0.826
                                    , relwidth=0.475, bordermode='ignore')
        self.LabelframeShear1.configure(relief=GROOVE)
        self.LabelframeShear1.configure(borderwidth="1")
        self.LabelframeShear1.configure(font=self.font18)
        self.LabelframeShear1.configure(foreground="black")
        self.LabelframeShear1.configure(text='''Shear''')
        self.LabelframeShear1.configure(background="cyan")
        self.LabelframeShear1.configure(highlightbackground="#d9d9d9")
        self.LabelframeShear1.configure(highlightcolor="black")
        self.LabelframeShear1.configure(width=320)

        self.LabelShear_fac = Label(self.LabelframeShear1)
        self.LabelShear_fac.place(relx=0.158, rely=0.111, height=34, width=108
                                  , bordermode='ignore')
        self.LabelShear_fac.configure(activebackground="#f9f9f9")
        self.LabelShear_fac.configure(activeforeground="black")
        self.LabelShear_fac.configure(background="cyan")
        self.LabelShear_fac.configure(disabledforeground="#a3a3a3")
        self.LabelShear_fac.configure(font=self.font9)
        self.LabelShear_fac.configure(foreground="#000000")
        self.LabelShear_fac.configure(highlightbackground="#d9d9d9")
        self.LabelShear_fac.configure(highlightcolor="black")
        self.LabelShear_fac.configure(text='''shear factor''')

        self.EntryShearFac = Entry(self.LabelframeShear1)
        self.EntryShearFac.place(relx=0.447, rely=0.111, height=40
                                 , relwidth=0.132, bordermode='ignore')
        self.EntryShearFac.configure(background="white")
        self.EntryShearFac.configure(disabledforeground="#a3a3a3")
        self.EntryShearFac.configure(font=self.font10)
        self.EntryShearFac.configure(foreground="#000000")
        self.EntryShearFac.configure(highlightbackground="#d9d9d9")
        self.EntryShearFac.configure(highlightcolor="black")
        self.EntryShearFac.configure(insertbackground="black")
        self.EntryShearFac.configure(justify=CENTER)
        self.EntryShearFac.configure(selectbackground="#c4c4c4")
        self.EntryShearFac.configure(selectforeground="black")

        self.B_horiShear = Button(self.LabelframeShear1)
        self.B_horiShear.place(relx=0.342, rely=0.244, height=30, width=120
                               , bordermode='ignore')
        self.B_horiShear.configure(activebackground="#d9d9d9")
        self.B_horiShear.configure(activeforeground="#000000")
        self.B_horiShear.configure(background="#d9d9d9")
        self.B_horiShear.configure(disabledforeground="#a3a3a3")
        self.B_horiShear.configure(font=self.font9)
        self.B_horiShear.configure(foreground="#000000")
        self.B_horiShear.configure(highlightbackground="#d9d9d9")
        self.B_horiShear.configure(highlightcolor="black")
        self.B_horiShear.configure(pady="0")
        self.B_horiShear.configure(text='''Horizontal Shear''')
        self.B_horiShear.configure(command = lambda : self.horishear1_calculation())

        self.B_vertiShear = Button(self.LabelframeShear1)
        self.B_vertiShear.place(relx=0.342, rely=0.333, height=30, width=120
                                , bordermode='ignore')
        self.B_vertiShear.configure(activebackground="#d9d9d9")
        self.B_vertiShear.configure(activeforeground="#000000")
        self.B_vertiShear.configure(background="#d9d9d9")
        self.B_vertiShear.configure(disabledforeground="#a3a3a3")
        self.B_vertiShear.configure(font=self.font9)
        self.B_vertiShear.configure(foreground="#000000")
        self.B_vertiShear.configure(highlightbackground="#d9d9d9")
        self.B_vertiShear.configure(highlightcolor="black")
        self.B_vertiShear.configure(pady="0")
        self.B_vertiShear.configure(text='''Vertical shear''')
        self.B_vertiShear.configure(command = lambda : self.vertishear1_calculation())

    def shear2_ui(self):
        self.LabelframeShear2 = LabelFrame(self.Labelframe4)
        self.LabelframeShear2.place(relx=0.513, rely=0.147, relheight=0.826
                                    , relwidth=0.475, bordermode='ignore')
        self.LabelframeShear2.configure(relief=GROOVE)
        self.LabelframeShear2.configure(borderwidth="1")
        self.LabelframeShear2.configure(font=self.font18)
        self.LabelframeShear2.configure(foreground="black")
        self.LabelframeShear2.configure(text='''Shear''')
        self.LabelframeShear2.configure(background="cyan")
        self.LabelframeShear2.configure(highlightbackground="#d9d9d9")
        self.LabelframeShear2.configure(highlightcolor="black")
        self.LabelframeShear2.configure(width=320)

        self.LabelShear_fac2 = Label(self.LabelframeShear2)
        self.LabelShear_fac2.place(relx=0.158, rely=0.111, height=34, width=108
                                   , bordermode='ignore')
        self.LabelShear_fac2.configure(activebackground="#f9f9f9")
        self.LabelShear_fac2.configure(activeforeground="black")
        self.LabelShear_fac2.configure(background="cyan")
        self.LabelShear_fac2.configure(disabledforeground="#a3a3a3")
        self.LabelShear_fac2.configure(font=self.font9)
        self.LabelShear_fac2.configure(foreground="#000000")
        self.LabelShear_fac2.configure(highlightbackground="#d9d9d9")
        self.LabelShear_fac2.configure(highlightcolor="black")
        self.LabelShear_fac2.configure(text='''shear factor''')

        self.EntryShearFac2 = Entry(self.LabelframeShear2)
        self.EntryShearFac2.place(relx=0.447, rely=0.111, height=40
                                  , relwidth=0.132, bordermode='ignore')
        self.EntryShearFac2.configure(background="white")
        self.EntryShearFac2.configure(disabledforeground="#a3a3a3")
        self.EntryShearFac2.configure(font=self.font10)
        self.EntryShearFac2.configure(foreground="#000000")
        self.EntryShearFac2.configure(highlightbackground="#d9d9d9")
        self.EntryShearFac2.configure(highlightcolor="black")
        self.EntryShearFac2.configure(insertbackground="black")
        self.EntryShearFac2.configure(justify=CENTER)
        self.EntryShearFac2.configure(selectbackground="#c4c4c4")
        self.EntryShearFac2.configure(selectforeground="black")

        self.B_horiShear2 = Button(self.LabelframeShear2)
        self.B_horiShear2.place(relx=0.342, rely=0.244, height=30, width=120
                                , bordermode='ignore')
        self.B_horiShear2.configure(activebackground="#d9d9d9")
        self.B_horiShear2.configure(activeforeground="#000000")
        self.B_horiShear2.configure(background="#d9d9d9")
        self.B_horiShear2.configure(disabledforeground="#a3a3a3")
        self.B_horiShear2.configure(font=self.font9)
        self.B_horiShear2.configure(foreground="#000000")
        self.B_horiShear2.configure(highlightbackground="#d9d9d9")
        self.B_horiShear2.configure(highlightcolor="black")
        self.B_horiShear2.configure(pady="0")
        self.B_horiShear2.configure(text='''Horizontal Shear''')
        self.B_horiShear2.configure(command = lambda : self.horishear2_calculation())

        self.B_vertiShear2 = Button(self.LabelframeShear2)
        self.B_vertiShear2.place(relx=0.342, rely=0.333, height=30, width=120
                                 , bordermode='ignore')
        self.B_vertiShear2.configure(activebackground="#d9d9d9")
        self.B_vertiShear2.configure(activeforeground="#000000")
        self.B_vertiShear2.configure(background="#d9d9d9")
        self.B_vertiShear2.configure(disabledforeground="#a3a3a3")
        self.B_vertiShear2.configure(font=self.font9)
        self.B_vertiShear2.configure(foreground="#000000")
        self.B_vertiShear2.configure(highlightbackground="#d9d9d9")
        self.B_vertiShear2.configure(highlightcolor="black")
        self.B_vertiShear2.configure(pady="0")
        self.B_vertiShear2.configure(text='''Vertical shear''')
        self.B_vertiShear2.configure(command = lambda : self.vertishear2_calculation())

    #****************************calculation method************************
    def point(self):
        self.Px = float(self.EntryPx.get())
        self.Py = float(self.EntryPy.get())

    def translation1_calculation(self):
        self.point()
        self.answertranslateX = self.Px + float(self.EntryVx.get())
        self.answertranslateY = self.Py + float(self.EntryVy.get())
        self.Box1stAns.configure(text = "( "+str(self.answertranslateX)+", "+str(self.answertranslateY)+" )")

    def translation2_calculation(self):
        if self.TCombobox1.get() == "translate":
            finalAnsX = self.answertranslateX + float(self.EntryVx2.get())
            finalAnsy = self.answertranslateY + float(self.EntryVy2.get())
            self.Box2ndAns.configure(text ="( "+str(finalAnsX)+", "+str(finalAnsy)+" )")
        elif self.TCombobox1.get() == "rotate":
            finalAnsX = self.ansRotateX + float(self.EntryVx2.get())
            finalAnsy = self.ansRotateY + float(self.EntryVy2.get())
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get()=="reflect":
            finalAnsX = self.ansreflectX + float(self.EntryVx2.get())
            finalAnsy = self.ansreflectY + float(self.EntryVy2.get())
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = self.ansScaleX + float(self.EntryVx2.get())
            finalAnsy = self.ansScaleY + float(self.EntryVy2.get())
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = self.ansShearx + float(self.EntryVx2.get())
            finalAnsy = self.ansSheary + float(self.EntryVy2.get())
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def rotation1_calculation(self):
        self.point()
        originrotateX = float(self.EntryRoX.get())
        originrotateY = float(self.EntryRoy.get())
        angle = float(self.EntryAngle1.get())
        angle_rad = radians(angle)
        ansx_minusOx = round(((self.Px - originrotateX) * cos(angle_rad)) +
                           ((self.Py - originrotateY) * sin(angle_rad)), 2)
        ansy_minusOy = round(((self.Px - originrotateX) * -sin(angle_rad)) +
                             ((self.Py - originrotateY) * cos(angle_rad)), 2)
        self.ansRotateX = ansx_minusOx + originrotateX
        self.ansRotateY = ansy_minusOy + originrotateY
        self.Box1stAns.configure(text ="( "+str(self.ansRotateX)+", "+str(self.ansRotateY)+" )")

    def rotation2_calculation(self):
        originrotateX2 = float(self.EntryRoX2.get())
        originrotateY2 = float(self.EntryRoy2.get())
        angle2 = float(self.EntryAngle2.get())
        angle_rad2 = radians(angle2)
        if self.TCombobox1.get() =="translate":
            ansx_minusOx = round(((self.answertranslateX - originrotateX2) * cos(angle_rad2)) +
                           ((self.answertranslateY - originrotateY2) * sin(angle_rad2)), 2)
            ansy_minusOy = round(((self.answertranslateX - originrotateX2) * -sin(angle_rad2)) +
                                 ((self.answertranslateY - originrotateY2) * cos(angle_rad2)), 2)
            finalAnsX = ansx_minusOx + originrotateX2
            finalAnsy = ansy_minusOy + originrotateY2
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get()=="rotate":
            ansx_minusOx = round(((self.ansRotateX - originrotateX2) * cos(angle_rad2)) +
                                 ((self.ansRotateY - originrotateY2) * sin(angle_rad2)), 2)
            ansy_minusOy = round(((self.ansRotateX - originrotateX2) * -sin(angle_rad2)) +
                                 ((self.ansRotateY - originrotateY2) * cos(angle_rad2)), 2)
            finalAnsX = ansx_minusOx + originrotateX2
            finalAnsy = ansy_minusOy + originrotateY2
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get()=="reflect":
            ansx_minusOx = round(((self.ansreflectX - originrotateX2) * cos(angle_rad2)) +
                                 ((self.ansreflectY - originrotateY2) * sin(angle_rad2)), 2)
            ansy_minusOy = round(((self.ansreflectX - originrotateX2) * -sin(angle_rad2)) +
                                 ((self.ansreflectY - originrotateY2) * cos(angle_rad2)), 2)
            finalAnsX = ansx_minusOx + originrotateX2
            finalAnsy = ansy_minusOy + originrotateY2
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "scaling":
            ansx_minusOx = round(((self.ansScaleX - originrotateX2) * cos(angle_rad2)) +
                                 ((self.ansScaleY - originrotateY2) * sin(angle_rad2)), 2)
            ansy_minusOy = round(((self.ansScaleX - originrotateX2) * -sin(angle_rad2)) +
                                 ((self.ansScaleY - originrotateY2) * cos(angle_rad2)), 2)

            finalAnsX = ansx_minusOx + originrotateX2
            finalAnsy = ansy_minusOy + originrotateY2
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            ansx_minusOx = round(((self.ansShearx - originrotateX2) * cos(angle_rad2)) +
                                 ((self.ansSheary - originrotateY2) * sin(angle_rad2)), 2)
            ansy_minusOy = round(((self.ansShearx - originrotateX2) * -sin(angle_rad2)) +
                                 ((self.ansSheary - originrotateY2) * cos(angle_rad2)), 2)
            finalAnsX = ansx_minusOx + originrotateX2
            finalAnsy = ansy_minusOy + originrotateY2
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def reflection1_yaxis(self):
        self.point()
        self.ansreflectX = self.Px - 2 * self.Px
        self.ansreflectY = self.Py
        self.Box1stAns.configure(text="( " + str(self.ansreflectX) + ", " + str(self.ansreflectY) + " )")

    def reflection1_xaxis(self):
        self.point()
        self.ansreflectX = self.Px
        self.ansreflectY = self.Py - 2* self.Py
        self.Box1stAns.configure(text="( " + str(self.ansreflectX) + ", " + str(self.ansreflectY) + " )")

    def reflection1_origin(self):
        self.point()
        self.ansreflectX = - self.Px
        self.ansreflectY = - self.Py
        self.Box1stAns.configure(text="( " + str(self.ansreflectX) + ", " + str(self.ansreflectY) + " )")

    def reflection1_lineY(self):
        self.point()
        m = float(self.EntryR_m.get())
        c = float(self.EntryR_c.get())
        self.ansreflectX = round((self.Px-self.Px*m**2)+(2*m*self.Py- 2*m*c) / (1+ m**2),2)
        self.ansreflectY = round(((2*m*self.Px)-(self.Py-self.Py*m**2)+2*c)/(1+ m**2),2)
        self.Box1stAns.configure(text="( " + str(self.ansreflectX) + ", " + str(self.ansreflectY) + " )")

    def reflection1_lineX(self):
        self.point()
        lineX = float(self.EntryR_x.get())
        self.ansreflectX = self.Px - 2* (self.Px - lineX)
        self.ansreflectY = self.Py
        self.Box1stAns.configure(text="( " + str(self.ansreflectX) + ", " + str(self.ansreflectY) + " )")

    def reflection2_yaxis(self):
        if self.TCombobox1.get()== "translate":
            finalAnsX = self.answertranslateX - 2 * self.answertranslateX
            finalAnsy = self.answertranslateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = self.ansRotateX - 2 * self.ansRotateX
            finalAnsy = self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = self.ansreflectX - 2 * self.ansreflectX
            finalAnsy = self.ansreflectY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = self.ansScaleX - 2 * self.ansScaleX
            finalAnsy = self.ansScaleY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = self.ansShearx - 2 * self.ansShearx
            finalAnsy = self.ansSheary
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def reflection2_xaxis(self):
        if self.TCombobox1.get()== "translate":
            finalAnsX = self.answertranslateX
            finalAnsy = self.answertranslateY - 2 * self.answertranslateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = self.ansRotateX
            finalAnsy = self.ansRotateY - 2 * self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = self.ansreflectX
            finalAnsy = self.ansreflectY - 2 * self.ansreflectY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "scaling":
            finalAnsX = self.ansScaleX
            finalAnsy = self.ansScaleY - 2 * self.ansScaleY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "shear":
            finalAnsX = self.ansShearx
            finalAnsy = self.ansSheary - 2 * self.ansSheary
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def reflection2_origin(self):
        if self.TCombobox1.get()== "translate":
            finalAnsX = -self.answertranslateX
            finalAnsy = -self.answertranslateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = -self.ansRotateX
            finalAnsy = -self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = -self.ansreflectX
            finalAnsy = -self.ansreflectY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = -self.ansScaleX
            finalAnsy = -self.ansScaleY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = -self.ansShearx
            finalAnsy = -self.ansSheary
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def reflection2_lineY(self):
        m = float(self.EntryR_m2.get())
        c = float(self.EntryR_c2.get())
        if self.TCombobox1.get()== "translate":
            finalAnsX = round((self.answertranslateX - self.answertranslateX * m ** 2) +
                         (2 * m * self.answertranslateY - 2 * m * c) / (1 + m ** 2),2)
            finalAnsy = round(((2 * m * self.answertranslateX) -
                         (self.answertranslateY - self.answertranslateY * m ** 2) + 2 * c) / (1 + m ** 2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = round((self.ansRotateX - self.ansRotateX * m ** 2) +
                         (2 * m * self.ansRotateY - 2 * m * c) / (1 + m ** 2),2)
            finalAnsy = round(((2 * m * self.ansRotateX) -
                         (self.ansRotateY - self.ansRotateY * m ** 2) + 2 * c) / (1 + m ** 2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = round((self.ansreflectX - self.ansreflectX * m ** 2) +
                         (2 * m * self.ansreflectY - 2 * m * c) / (1 + m ** 2),2)
            finalAnsy = round(((2 * m * self.ansreflectX) -
                         (self.ansreflectY - self.ansreflectY * m ** 2) + 2 * c) / (1 + m ** 2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = round((self.ansScaleX - self.ansScaleX * m ** 2) +
                         (2 * m * self.ansScaleY - 2 * m * c) / (1 + m ** 2),2)
            finalAnsy = round(((2 * m * self.ansScaleX) -
                         (self.ansScaleY - self.ansScaleY * m ** 2) + 2 * c) / (1 + m ** 2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = round((self.ansShearx - self.ansShearx * m ** 2) +
                         (2 * m * self.ansSheary - 2 * m * c) / (1 + m ** 2),2)
            finalAnsy = round(((2 * m * self.ansShearx) -
                         (self.ansSheary - self.ansSheary * m ** 2) + 2 * c) / (1 + m ** 2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def reflection2_lineX(self):
        lineX2 = float(self.EntryR_x2.get())
        if self.TCombobox1.get()== "translate":
            finalAnsX = self.answertranslateX - 2 * (self.answertranslateX - lineX2)
            finalAnsy = self.answertranslateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = self.ansRotateX - 2 * (self.ansRotateX - lineX2)
            finalAnsy = self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = self.ansreflectX - 2 * (self.ansreflectX - lineX2)
            finalAnsy = self.ansreflectY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = self.ansScaleX - 2 * (self.ansScaleX - lineX2)
            finalAnsy = self.ansScaleY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = self.ansShearx - 2 * (self.ansShearx - lineX2)
            finalAnsy = self.ansSheary
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def scaling1_calculation(self):
        self.point()
        scaleFactor = float(self.EntryScale_fac.get())
        scaleOriginX = float(self.EntryScale_Ox.get())
        scaleOriginY = float(self.EntryScale_Oy.get())
        self.ansScaleX = round(((self.Px * scaleFactor) - scaleOriginX), 2)
        self.ansScaleY = round(((self.Py * scaleFactor) - scaleOriginY), 2)
        self.Box1stAns.configure(text="( " + str(self.ansScaleX) + ", " + str(self.ansScaleY) + " )")

    def scaling2_calculation(self):
        scaleFactor2 = float(self.EntryScale_fac2.get())
        scaleOriginX2 = float(self.EntryScale_Ox2.get())
        scaleOriginY2 = float(self.EntryScale_Oy2.get())
        if self.TCombobox1.get()== "translate":
            finalAnsX = round(((self.answertranslateX * scaleFactor2) - scaleOriginX2),2)
            finalAnsy = round(((self.answertranslateY * scaleFactor2) - scaleOriginY2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = round(((self.ansRotateX * scaleFactor2) - scaleOriginX2),2)
            finalAnsy = round(((self.ansRotateY * scaleFactor2) - scaleOriginY2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = round(((self.ansreflectX * scaleFactor2) - scaleOriginX2),2)
            finalAnsy = round(((self.ansreflectY * scaleFactor2) - scaleOriginY2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = round(((self.ansScaleX * scaleFactor2) - scaleOriginX2),2)
            finalAnsy = round(((self.ansScaleY * scaleFactor2) - scaleOriginY2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX ) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = round(((self.ansShearx * scaleFactor2) - scaleOriginX2),2)
            finalAnsy = round(((self.ansSheary * scaleFactor2) - scaleOriginY2),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def horishear1_calculation(self):
        self.point()
        shearFactor = float(self.EntryShearFac.get())
        self.ansShearx = round(self.Px + shearFactor*self.Py,2)
        self.ansSheary = self.Py
        self.Box1stAns.configure(text="( " + str(self.ansShearx) + ", " + str(self.ansSheary) + " )")

    def vertishear1_calculation(self):
        self.point()
        shearFactor = float(self.EntryShearFac.get())
        self.ansShearx = self.Px
        self.ansSheary = round(self.Py + shearFactor * self.Px,2)
        self.Box1stAns.configure(text="( " + str(self.ansShearx) + ", " + str(self.ansSheary) + " )")

    def horishear2_calculation(self):
        shearFactor = float(self.EntryShearFac2.get())
        if self.TCombobox1.get() =="translate":
            finalAnsX = round((self.answertranslateX + shearFactor * self.answertranslateY),2)
            finalAnsy = self.answertranslateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="rotate":
            finalAnsX = round((self.ansRotateX + shearFactor * self.ansRotateY),2)
            finalAnsy = self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="reflect":
            finalAnsX = round((self.ansreflectX + shearFactor * self.ansreflectY),2)
            finalAnsy = self.ansRotateY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="scaling":
            finalAnsX = round((self.ansScaleX + shearFactor * self.ansScaleY),2)
            finalAnsy = self.ansScaleY
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() =="shear":
            finalAnsX = round((self.ansShearx + shearFactor * self.ansSheary),2)
            finalAnsy = self.ansSheary
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def vertishear2_calculation(self):
        shearFactor = float(self.EntryShearFac2.get())
        if self.TCombobox1.get() == "translate":
            finalAnsX = self.answertranslateX
            finalAnsy = round((self.answertranslateY + shearFactor * self.answertranslateX),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "rotate":
            finalAnsX = self.ansRotateX
            finalAnsy = round((self.ansRotateY + shearFactor * self.ansRotateX),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "reflect":
            finalAnsX = self.ansreflectX
            finalAnsy = round((self.ansreflectY + shearFactor * self.ansreflectX),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "scaling":
            finalAnsX = self.ansScaleX
            finalAnsy = round((self.ansScaleY + shearFactor * self.ansScaleX),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        elif self.TCombobox1.get() == "shear":
            finalAnsX = self.ansShearx
            finalAnsy = round((self.ansSheary + shearFactor * self.ansShearx),2)
            self.Box2ndAns.configure(text="( " + str(finalAnsX) + ", " + str(finalAnsy) + " )")
        else:
            messagebox.showerror("Error", "Previous transformation not found! \n  Please select one and try again")

    def openBasicCal(self):
        root.destroy()
        Cal.vp_start_gui()

    def openVector(self):
        root.destroy()
        Vec.vp_start_gui()

    def openVector3d(self):
        root.destroy()
        Vec3.vp_start_gui()

    def to_2by2(self):
        root.destroy()
        mat2.vp_start_gui()

    def to_3by3(self):
        root.destroy()
        mat3.vp_start_gui()

    def to_4by4(self):
        root.destroy()
        mat4.vp_start_gui()

    def openAbout(self):
        ab.vp_start_gui()

    def btoMain(self):
        root.destroy()
        mm.vp_start_gui()

    def to_st(self):
        root.destroy()
        st.vp_start_gui()

    def to_ct(self):
        root.destroy()
        ct.vp_start_gui()

    def to_r3d(self):
        root.destroy()
        r3d.vp_start_gui()

    def when_closing(self):
        if messagebox.askyesno('My Vector and Matrix Calculator', 'Do you really want to quit?'):
            sys.exit()
        else:
            pass








if __name__ == '__main__':
    vp_start_gui()


