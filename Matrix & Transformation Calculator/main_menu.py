#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 08, 2018 09:30:49 PM CST  platform: Windows NT

import sys
from winsound import*
from tkinter.messagebox import askyesno
import basicCalt as bc
import Vector2 as Vec
import matrix2 as mat2
import matrix3by3 as mat3
import matrix4by4 as mat4
import  series_transform as st
import CompositeTransform as ct
import Vector3d as Vec3
import rotation_3d as r3d

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    root.resizable(width=False, height=False)
    root.iconbitmap("icon.ico")
    root.protocol("WM_DELETE_WINDOW", top.when_closing)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, mainWin):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        PlaySound('main_menu_bg.wav', SND_LOOP | SND_ASYNC)

        #window of main menu
        self.mainMenu = mainWin

        self.mainMenu.geometry("800x450+450+100")
        self.mainMenu.title("My Vector and Matrix Calculator")
        self.mainMenu.configure(background="#d9d9d9")



        render = PhotoImage(file ="bg_logo.png")
        img = Label(image=render)
        img.image = render
        img.place(x= -3, y =0)


        self.basic = Button(self.mainMenu)
        self.basic.place(relx=0.4, rely=0.4, height=46, width=152)
        self.basic.configure(activebackground="#d9d9d9")
        self.basic.configure(activeforeground="#000000")
        self.basic.configure(background="#d9d9d9")
        self.basic.configure(borderwidth="0")
        self.basic.configure(disabledforeground="#a3a3a3")
        self.basic.configure(foreground="#000000")
        self.basic.configure(highlightbackground="#d9d9d9")
        self.basic.configure(highlightcolor="black")
        self._img1 = PhotoImage(file="b_basic.png")
        self.basic.configure(image=self._img1)
        self.basic.configure(pady="0")
        self.basic.configure(command = lambda : self.openbasic())

        self.matrix = Button(self.mainMenu)
        self.matrix.place(relx=0.4, rely=0.522, height=46, width=152)
        self.matrix.configure(activebackground="#d9d9d9")
        self.matrix.configure(activeforeground="#000000")
        self.matrix.configure(background="#d9d9d9")
        self.matrix.configure(borderwidth="0")
        self.matrix.configure(disabledforeground="#a3a3a3")
        self.matrix.configure(foreground="#000000")
        self.matrix.configure(highlightbackground="#d9d9d9")
        self.matrix.configure(highlightcolor="black")
        self._img2 = PhotoImage(file="b_matrix.png")
        self.matrix.configure(image=self._img2)
        self.matrix.configure(pady="0")
        self.matrix.configure(command = lambda : self.matrix_menu())

        self.vector = Button(self.mainMenu)
        self.vector.place(relx=0.403, rely=0.644, height=46, width=147)
        self.vector.configure(activebackground="#d9d9d9")
        self.vector.configure(activeforeground="#000000")
        self.vector.configure(background="#d9d9d9")
        self.vector.configure(borderwidth="0")
        self.vector.configure(disabledforeground="#a3a3a3")
        self.vector.configure(foreground="#000000")
        self.vector.configure(highlightbackground="#d9d9d9")
        self.vector.configure(highlightcolor="black")
        self._img3 = PhotoImage(file="b_vector.png")
        self.vector.configure(image=self._img3)
        self.vector.configure(pady="0")
        self.vector.configure(command = lambda : self.vector_menu())

        self.transform = Button(self.mainMenu)
        self.transform.place(relx=0.328, rely=0.766, height=46, width=280)
        self.transform.configure(activebackground="#d9d9d9")
        self.transform.configure(activeforeground="#000000")
        self.transform.configure(background="#d9d9d9")
        self.transform.configure(borderwidth="0")
        self.transform.configure(disabledforeground="#a3a3a3")
        self.transform.configure(foreground="#000000")
        self.transform.configure(highlightbackground="#d9d9d9")
        self.transform.configure(highlightcolor="black")
        self._img4 = PhotoImage(file="b_transformation.png")
        self.transform.configure(image=self._img4)
        self.transform.configure(pady="0")
        self.transform.configure(command = lambda : self.transform_menu())

        #matrix main menu
        self.matrixMenu = Toplevel()

        self.matrixMenu.geometry("800x450+500+50")
        self.matrixMenu.title("New Toplevel")
        self.matrixMenu.configure(background="#d9d9d9")


        render = PhotoImage(file = "bg_logo.png")
        self.matrixcover = Label(self.matrixMenu, image=render)
        self.matrixcover.image = render
        self.matrixcover.place(x=-3, y=0)

        self.twobytwo = Button(self.matrixMenu)
        self.twobytwo.place(relx=0.4, rely=0.4, height=46, width=146)
        self.twobytwo.configure(activebackground="#d9d9d9")
        self.twobytwo.configure(activeforeground="#000000")
        self.twobytwo.configure(background="#d9d9d9")
        self.twobytwo.configure(borderwidth="0")
        self.twobytwo.configure(disabledforeground="#a3a3a3")
        self.twobytwo.configure(foreground="#000000")
        self.twobytwo.configure(highlightbackground="#d9d9d9")
        self.twobytwo.configure(highlightcolor="black")
        self._img2by2 = PhotoImage(file="b_2by2.png")
        self.twobytwo.configure(image=self._img2by2)
        self.twobytwo.configure(pady="0")
        self.twobytwo.configure()
        self.twobytwo.configure(command = lambda : self.open2by2())

        self.threebythree = Button(self.matrixMenu)
        self.threebythree.place(relx=0.4, rely=0.522, height=46, width=146)
        self.threebythree.configure(activebackground="#d9d9d9")
        self.threebythree.configure(activeforeground="#000000")
        self.threebythree.configure(background="#d9d9d9")
        self.threebythree.configure(borderwidth="0")
        self.threebythree.configure(disabledforeground="#a3a3a3")
        self.threebythree.configure(foreground="#000000")
        self.threebythree.configure(highlightbackground="#d9d9d9")
        self.threebythree.configure(highlightcolor="black")
        self._img3by3 = PhotoImage(file="b_3by3.png")
        self.threebythree.configure(image=self._img3by3)
        self.threebythree.configure(pady="0")
        self.threebythree.configure(command = lambda : self.open3by3())

        self.fourbyfour = Button(self.matrixMenu)
        self.fourbyfour.place(relx=0.403, rely=0.644, height=46, width=146)
        self.fourbyfour.configure(activebackground="#d9d9d9")
        self.fourbyfour.configure(activeforeground="#000000")
        self.fourbyfour.configure(background="#d9d9d9")
        self.fourbyfour.configure(borderwidth="0")
        self.fourbyfour.configure(disabledforeground="#a3a3a3")
        self.fourbyfour.configure(foreground="#000000")
        self.fourbyfour.configure(highlightbackground="#d9d9d9")
        self.fourbyfour.configure(highlightcolor="black")
        self._img4by4 = PhotoImage(file="b_4by4.png")
        self.fourbyfour.configure(image=self._img4by4)
        self.fourbyfour.configure(pady="0")
        self.fourbyfour.configure(command = lambda : self.open4by4())

        self.rotation3d = Button(self.matrixMenu)
        self.rotation3d.place(relx=0.403, rely=0.766, height=48, width=151)
        self.rotation3d.configure(activebackground="#d9d9d9")
        self.rotation3d.configure(background="#d9d9d9")
        self.rotation3d.configure(borderwidth="0")
        self.rotation3d.configure(disabledforeground="#a3a3a3")
        self.rotation3d.configure(foreground="#000000")
        self.rotation3d.configure(highlightbackground="#d9d9d9")
        self.rotation3d.configure(highlightcolor="black")
        self._imgr3d = PhotoImage(file="b_3drotation.png")
        self.rotation3d.configure(image=self._imgr3d)
        self.rotation3d.configure(pady="0")
        self.rotation3d.configure(command=lambda: self.to_r3d())

        self.backMatrix = Button(self.matrixMenu)
        self.backMatrix.place(relx=0.175, rely=0.790, height=50, width=68)
        self.backMatrix.configure(activebackground="#d9d9d9")
        self.backMatrix.configure(activeforeground="#000000")
        self.backMatrix.configure(background="#d9d9d9")
        self.backMatrix.configure(borderwidth="0")
        self.backMatrix.configure(disabledforeground="#a3a3a3")
        self.backMatrix.configure(foreground="#000000")
        self.backMatrix.configure(highlightbackground="#d9d9d9")
        self.backMatrix.configure(highlightcolor="black")
        self._imgbackM = PhotoImage(file="b_back.png")
        self.backMatrix.configure(image=self._imgbackM)
        self.backMatrix.configure(pady="0")
        self.backMatrix.configure(command = lambda : self.matBackMain())

        self.matrixMenu.withdraw()
        self.matrixMenu.protocol("WM_DELETE_WINDOW", self.endProgram)

        #vector menu
        self.Vmenu = Toplevel()

        self.Vmenu.geometry("800x450+500+50")
        self.Vmenu.title("Vector")
        self.Vmenu.configure(background="#d9d9d9")

        render = PhotoImage(file="bg_logo.png")
        self.Vcover = Label(self.Vmenu, image=render)
        self.Vcover.image = render
        self.Vcover.place(x=-3, y=0)

        self.vector2d = Button(self.Vmenu)
        self.vector2d.place(relx=0.4, rely=0.4, height=48, width=148)
        self.vector2d.configure(activebackground="#d9d9d9")
        self.vector2d.configure(activeforeground="#000000")
        self.vector2d.configure(background="#d9d9d9")
        self.vector2d.configure(borderwidth="0")
        self.vector2d.configure(disabledforeground="#a3a3a3")
        self.vector2d.configure(foreground="#000000")
        self.vector2d.configure(highlightbackground="#d9d9d9")
        self.vector2d.configure(highlightcolor="black")
        self._img2d = PhotoImage(file="b_2dv.png")
        self.vector2d.configure(image=self._img2d)
        self.vector2d.configure(pady="0")
        self.vector2d.configure(command=lambda: self.openVector())

        self.vector3d = Button(self.Vmenu)
        self.vector3d.place(relx=0.4, rely=0.522, height=48, width=150)
        self.vector3d.configure(activebackground="#d9d9d9")
        self.vector3d.configure(activeforeground="#000000")
        self.vector3d.configure(background="#d9d9d9")
        self.vector3d.configure(borderwidth="0")
        self.vector3d.configure(disabledforeground="#a3a3a3")
        self.vector3d.configure(foreground="#000000")
        self.vector3d.configure(highlightbackground="#d9d9d9")
        self.vector3d.configure(highlightcolor="black")
        self._img3d = PhotoImage(file="b_3dv.png")
        self.vector3d.configure(image=self._img3d)
        self.vector3d.configure(pady="0")
        self.vector3d.configure(command=lambda: self.openVector3d())

        self.backV = Button(self.Vmenu)
        self.backV.place(relx=0.175, rely=0.790, height=50, width=68)
        self.backV.configure(activebackground="#d9d9d9")
        self.backV.configure(activeforeground="#000000")
        self.backV.configure(background="#d9d9d9")
        self.backV.configure(borderwidth="0")
        self.backV.configure(disabledforeground="#a3a3a3")
        self.backV.configure(foreground="#000000")
        self.backV.configure(highlightbackground="#d9d9d9")
        self.backV.configure(highlightcolor="black")
        self._imgbackV = PhotoImage(file="b_back.png")
        self.backV.configure(image=self._imgbackV)
        self.backV.configure(pady="0")
        self.backV.configure(command=lambda: self.VectorBackMain())

        self.Vmenu.withdraw()
        self.Vmenu.protocol("WM_DELETE_WINDOW", self.endProgram)


        #transformation menu
        self.Tmenu = Toplevel()

        self.Tmenu.geometry("800x450+500+50")
        self.Tmenu.title("New Toplevel")
        self.Tmenu.configure(background="#d9d9d9")


        render = PhotoImage(file = "bg_logo.png")
        self.tcover = Label(self.Tmenu, image=render)
        self.tcover.image = render
        self.tcover.place(x=-3, y=0)

        self.series = Button(self.Tmenu)
        self.series.place(relx=0.4, rely=0.4, height=48, width=160)
        self.series.configure(activebackground="#d9d9d9")
        self.series.configure(activeforeground="#000000")
        self.series.configure(background="#d9d9d9")
        self.series.configure(borderwidth="0")
        self.series.configure(disabledforeground="#a3a3a3")
        self.series.configure(foreground="#000000")
        self.series.configure(highlightbackground="#d9d9d9")
        self.series.configure(highlightcolor="black")
        self._imgseries = PhotoImage(file="b_series.png")
        self.series.configure(image=self._imgseries)
        self.series.configure(pady="0")
        self.series.configure(command = lambda : self.to_st())

        self.composite = Button(self.Tmenu)
        self.composite.place(relx=0.4, rely=0.522, height=48, width=161)
        self.composite.configure(activebackground="#d9d9d9")
        self.composite.configure(activeforeground="#000000")
        self.composite.configure(background="#d9d9d9")
        self.composite.configure(borderwidth="0")
        self.composite.configure(disabledforeground="#a3a3a3")
        self.composite.configure(foreground="#000000")
        self.composite.configure(highlightbackground="#d9d9d9")
        self.composite.configure(highlightcolor="black")
        self._imgcompo = PhotoImage(file="b_composite.png")
        self.composite.configure(image=self._imgcompo)
        self.composite.configure(pady="0")
        self.composite.configure(command = lambda : self.to_ct())

        self.backT = Button(self.Tmenu)
        self.backT.place(relx=0.175, rely=0.790, height=50, width=68)
        self.backT.configure(activebackground="#d9d9d9")
        self.backT.configure(activeforeground="#000000")
        self.backT.configure(background="#d9d9d9")
        self.backT.configure(borderwidth="0")
        self.backT.configure(disabledforeground="#a3a3a3")
        self.backT.configure(foreground="#000000")
        self.backT.configure(highlightbackground="#d9d9d9")
        self.backT.configure(highlightcolor="black")
        self._imgbackT = PhotoImage(file="b_back.png")
        self.backT.configure(image=self._imgbackT)
        self.backT.configure(pady="0")
        self.backT.configure(command = lambda : self.transBackMain())

        self.Tmenu.withdraw()
        self.Tmenu.protocol("WM_DELETE_WINDOW", self.endProgram)



    def endProgram(self):
        self.mainMenu.destroy()

    def matBackMain(self):
        self.matrixMenu.withdraw()
        self.mainMenu.deiconify()

    def matrix_menu(self):
        self.mainMenu.withdraw()
        self.matrixMenu.deiconify()

    def vector_menu(self):
        self.mainMenu.withdraw()
        self.Vmenu.deiconify()

    def VectorBackMain(self):
        self.Vmenu.withdraw()
        self.mainMenu.deiconify()

    def transform_menu(self):
        self.mainMenu.withdraw()
        self.Tmenu.deiconify()

    def transBackMain(self):
        self.Tmenu.withdraw()
        self.mainMenu.deiconify()

    def openVector(self):
        root.destroy()
        Vec.vp_start_gui()

    def openVector3d(self):
        root.destroy()
        Vec3.vp_start_gui()

    def openbasic(self):
        root.destroy()
        bc.vp_start_gui()

    def open2by2(self):
        root.destroy()
        mat2.vp_start_gui()

    def open3by3(self):
        root.destroy()
        mat3.vp_start_gui()

    def open4by4(self):
        root.destroy()
        mat4.vp_start_gui()

    def to_st(self):
        root.destroy()
        st.vp_start_gui()

    def to_ct(self):
        root.destroy()
        ct.vp_start_gui()

    def to_r3d(self):
        root.destroy()
        r3d.vp_start_gui()

    def when_closing(self):
        if askyesno('My Vector and Matrix Calculator', 'Do you really want to quit?'):
            sys.exit()
        else:
            pass







if __name__ == '__main__':
    vp_start_gui()



