#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 12, 2018 07:41:17 AM CST  platform: Windows NT

import sys
from math import*
from tkinter.messagebox import*
from winsound import*
import basicCalt as Cal
import matrix2 as mat2
import matrix3by3 as mat3
import matrix4by4 as mat4
import about as ab
import main_menu as mm
import series_transform as st
import CompositeTransform as ct
import Vector2 as Vec
import rotation_3d as r3d

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Basic_CG_Calculator (root)
    root.resizable(width=False, height=False)
    root.protocol("WM_DELETE_WINDOW", top.when_closing)
    PlaySound(None, SND_PURGE)  # stop all sound,no sound for vector :(
    root.iconbitmap("icon.ico")
    root.mainloop()

w = None
def create_Basic_CG_Calculator(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Basic_CG_Calculator (w)
    return (w, top)

def destroy_Basic_CG_Calculator():
    global w
    w.destroy()
    w = None


class Basic_CG_Calculator:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Times New Roman} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font14 = "-family Tahoma -size 12 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font15 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font17 = "-family {Segoe UI} -size 30 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font12 = "-family {Courier New} -size 15 -weight normal -slant " \
                 "roman -underline 0 -overstrike 0"

        top.geometry("600x700+400+50")
        top.title("My Vector and Matrix Calculator")
        top.configure(background="DarkOliveGreen1")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.mode = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.mode,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Mode")
        self.mode.add_command(command=lambda: self.openBasicCal(),
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Standard Calculator")
        self.allMatMenu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.allMatMenu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Matrix Calculator")

        self.allMatMenu.add_command(command=lambda: self.to_2by2(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 2x2")

        self.allMatMenu.add_command(command=lambda: self.to_3by3(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 3x3")

        self.allMatMenu.add_command(command=lambda: self.to_4by4(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="Matrix 4x4")

        self.allMatMenu.add_command(command=lambda: self.to_r3d(),
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="3D rotation")

        self.vector_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.vector_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Vector Calculator")

        self.vector_menu.add_command(command=lambda: self.openVector(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="2D vector")

        self.vector_menu.add_command(
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="3D vector")

        self.trans_menu = Menu(top, tearoff=0)
        self.mode.add_cascade(menu=self.trans_menu,
                              activebackground="#d9d9d9",
                              activeforeground="#000000",
                              background="#d9d9d9",
                              font="TkMenuFont",
                              foreground="#000000",
                              label="Transformation")

        self.trans_menu.add_command(command=lambda: self.to_st(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="series transformation")

        self.trans_menu.add_command(command=lambda: self.to_ct(),
                                    activebackground="#d9d9d9",
                                    activeforeground="#000000",
                                    background="#d9d9d9",
                                    font="TkMenuFont",
                                    foreground="#000000",
                                    label="composite transformation")

        self.menubar.add_command(command=lambda: self.openAbout(),
                                 activebackground="#d8d8d8",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="About")

        self.b2menu = Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.b2menu,
                                 activebackground="#d9d9d9",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Navigate")

        self.b2menu.add_command(command=lambda: self.btoMain(),
                                activebackground="#d9d9d9",
                                activeforeground="#000000",
                                background="#d9d9d9",
                                font="TkMenuFont",
                                foreground="#000000",
                                label="back to main menu")






        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.067, rely=0.014, relheight=0.35
                , relwidth=0.867)
        self.Labelframe1.configure(relief=RIDGE)
        self.Labelframe1.configure(font=font11)
        self.Labelframe1.configure(foreground="#4400ff")
        self.Labelframe1.configure(relief=RIDGE)
        self.Labelframe1.configure(text='''Enter your vector:''')
        self.Labelframe1.configure(background="powder blue")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=520)

        self.Labelv1 = Label(self.Labelframe1)
        self.Labelv1.place(relx=0.019, rely=0.122, height=70, width=480
                , bordermode='ignore')
        self.Labelv1.configure(activebackground="#f0f0f0")
        self.Labelv1.configure(activeforeground="#000000")
        self.Labelv1.configure(background="powder blue")
        self.Labelv1.configure(disabledforeground="#a3a3a3")
        self.Labelv1.configure(font=font17)
        self.Labelv1.configure(foreground="#000000")
        self.Labelv1.configure(highlightbackground="#d9d9d9")
        self.Labelv1.configure(highlightcolor="black")
        self.Labelv1.configure(text='''v1=(       ,       ,        )''')
        self.Labelv1.configure(width=480)

        self.Entry1 = Entry(self.Labelframe1)
        self.Entry1.place(relx=0.308, rely=0.204, height=40, relwidth=0.115
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font12)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(justify = CENTER)

        self.Entry2 = Entry(self.Labelframe1)
        self.Entry2.place(relx=0.481, rely=0.204, height=40, relwidth=0.115
                , bordermode='ignore')
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font=font12)
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(justify=CENTER)

        self.Entry3 = Entry(self.Labelframe1)
        self.Entry3.place(relx=0.654, rely=0.204, height=40, relwidth=0.115
                          , bordermode='ignore')
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font=font12)
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")
        self.Entry3.configure(justify=CENTER)

        self.Labelv2 = Label(self.Labelframe1)
        self.Labelv2.place(relx=0.019, rely=0.408, height=70, width=480
                , bordermode='ignore')
        self.Labelv2.configure(activebackground="#f0f0f0")
        self.Labelv2.configure(activeforeground="#000000")
        self.Labelv2.configure(background="powder blue")
        self.Labelv2.configure(disabledforeground="#a3a3a3")
        self.Labelv2.configure(font=font17)
        self.Labelv2.configure(foreground="#000000")
        self.Labelv2.configure(highlightbackground="#d9d9d9")
        self.Labelv2.configure(highlightcolor="black")
        self.Labelv2.configure(text='''v2=(       ,       ,        )''')
        self.Labelv2.configure(width=480)

        self.Entry4 = Entry(self.Labelframe1)
        self.Entry4.place(relx=0.308, rely=0.49, height=40, relwidth=0.115
                , bordermode='ignore')
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font=font12)
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")
        self.Entry4.configure(justify=CENTER)

        self.Entry5 = Entry(self.Labelframe1)
        self.Entry5.place(relx=0.481, rely=0.49, height=40, relwidth=0.115
                , bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font=font12)
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(highlightbackground="#d9d9d9")
        self.Entry5.configure(highlightcolor="black")
        self.Entry5.configure(insertbackground="black")
        self.Entry5.configure(selectbackground="#c4c4c4")
        self.Entry5.configure(selectforeground="black")
        self.Entry5.configure(justify=CENTER)

        self.Entry6 = Entry(self.Labelframe1)
        self.Entry6.place(relx=0.654, rely=0.49, height=40, relwidth=0.115
                          , bordermode='ignore')
        self.Entry6.configure(background="white")
        self.Entry6.configure(disabledforeground="#a3a3a3")
        self.Entry6.configure(font=font12)
        self.Entry6.configure(foreground="#000000")
        self.Entry6.configure(highlightbackground="#d9d9d9")
        self.Entry6.configure(highlightcolor="black")
        self.Entry6.configure(insertbackground="black")
        self.Entry6.configure(selectbackground="#c4c4c4")
        self.Entry6.configure(selectforeground="black")
        self.Entry6.configure(width=80)
        self.Entry6.configure(justify=CENTER)

        self.Label9 = Label(self.Labelframe1)
        self.Label9.place(relx=0.25, rely=0.776, height=34, width=97
                , bordermode='ignore')
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="powder blue")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font=font11)
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''scalar,k =''')

        self.EntryK = Entry(self.Labelframe1)
        self.EntryK.place(relx=0.442, rely=0.776, height=40, relwidth=0.135
                , bordermode='ignore')
        self.EntryK.configure(background="white")
        self.EntryK.configure(disabledforeground="#a3a3a3")
        self.EntryK.configure(font=font12)
        self.EntryK.configure(foreground="#000000")
        self.EntryK.configure(highlightbackground="#d9d9d9")
        self.EntryK.configure(highlightcolor="black")
        self.EntryK.configure(insertbackground="black")
        self.EntryK.configure(selectbackground="#c4c4c4")
        self.EntryK.configure(selectforeground="black")

        self.Labelframe2 = LabelFrame(top)
        self.Labelframe2.place(relx=0.067, rely=0.375, relheight=0.407
                , relwidth=0.867)
        self.Labelframe2.configure(relief=RIDGE)
        self.Labelframe2.configure(borderwidth="3")
        self.Labelframe2.configure(font=font11)
        self.Labelframe2.configure(foreground="#4400ff")
        self.Labelframe2.configure(labelanchor="n")
        self.Labelframe2.configure(relief=RIDGE)
        self.Labelframe2.configure(text='''option''')
        self.Labelframe2.configure(background="Dark Orchid1")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        self.Labelframe2.configure(width=520)

        self.ButtonAdd = Button(self.Labelframe2)
        self.ButtonAdd.place(relx=0.106, rely=0.105, height=37, width=200
                , bordermode='ignore')
        self.ButtonAdd.configure(activebackground="#d9d9d9")
        self.ButtonAdd.configure(activeforeground="#000000")
        self.ButtonAdd.configure(background="lawn green")
        self.ButtonAdd.configure(disabledforeground="#a3a3a3")
        self.ButtonAdd.configure(font=font13)
        self.ButtonAdd.configure(foreground="#000000")
        self.ButtonAdd.configure(highlightbackground="#d9d9d9")
        self.ButtonAdd.configure(highlightcolor="black")
        self.ButtonAdd.configure(pady="0")
        self.ButtonAdd.configure(text='''Addition of v1 and v2''')
        self.ButtonAdd.configure(command = lambda : self.sum_v1v2())

        self.ButtonSub = Button(self.Labelframe2)
        self.ButtonSub.place(relx=0.519, rely=0.105, height=37, width=200
                , bordermode='ignore')
        self.ButtonSub.configure(activebackground="#d9d9d9")
        self.ButtonSub.configure(activeforeground="#000000")
        self.ButtonSub.configure(background="lawn green")
        self.ButtonSub.configure(disabledforeground="#a3a3a3")
        self.ButtonSub.configure(font=font13)
        self.ButtonSub.configure(foreground="#000000")
        self.ButtonSub.configure(highlightbackground="#d9d9d9")
        self.ButtonSub.configure(highlightcolor="black")
        self.ButtonSub.configure(pady="0")
        self.ButtonSub.configure(text='''Subtraction of v1 and v2''')
        self.ButtonSub.configure(command = lambda : self.sub_v1v2())

        self.ButtonMag1 = Button(self.Labelframe2)
        self.ButtonMag1.place(relx=0.202, rely=0.263, height=37, width=150
                , bordermode='ignore')
        self.ButtonMag1.configure(activebackground="#d9d9d9")
        self.ButtonMag1.configure(activeforeground="#000000")
        self.ButtonMag1.configure(background="lawn green")
        self.ButtonMag1.configure(disabledforeground="#a3a3a3")
        self.ButtonMag1.configure(font=font13)
        self.ButtonMag1.configure(foreground="#000000")
        self.ButtonMag1.configure(highlightbackground="#d9d9d9")
        self.ButtonMag1.configure(highlightcolor="black")
        self.ButtonMag1.configure(pady="0")
        self.ButtonMag1.configure(text='''Magnitude of v1''')
        self.ButtonMag1.configure(command = lambda : self.magnitudev1())

        self.ButtonMag2 = Button(self.Labelframe2)
        self.ButtonMag2.place(relx=0.519, rely=0.263, height=37, width=150
                , bordermode='ignore')
        self.ButtonMag2.configure(activebackground="#d9d9d9")
        self.ButtonMag2.configure(activeforeground="#000000")
        self.ButtonMag2.configure(background="lawn green")
        self.ButtonMag2.configure(disabledforeground="#a3a3a3")
        self.ButtonMag2.configure(font=font13)
        self.ButtonMag2.configure(foreground="#000000")
        self.ButtonMag2.configure(highlightbackground="#d9d9d9")
        self.ButtonMag2.configure(highlightcolor="black")
        self.ButtonMag2.configure(pady="0")
        self.ButtonMag2.configure(text='''Magnitude of v2''')
        self.ButtonMag2.configure(command = lambda : self.magnitudev2())

        self.ButtonScalar1 = Button(self.Labelframe2)
        self.ButtonScalar1.place(relx=0.029, rely=0.421, height=37, width=240
                , bordermode='ignore')
        self.ButtonScalar1.configure(activebackground="#d9d9d9")
        self.ButtonScalar1.configure(activeforeground="#000000")
        self.ButtonScalar1.configure(background="lawn green")
        self.ButtonScalar1.configure(disabledforeground="#a3a3a3")
        self.ButtonScalar1.configure(font=font13)
        self.ButtonScalar1.configure(foreground="#000000")
        self.ButtonScalar1.configure(highlightbackground="#d9d9d9")
        self.ButtonScalar1.configure(highlightcolor="black")
        self.ButtonScalar1.configure(pady="0")
        self.ButtonScalar1.configure(text='''scalar and v1 multiplication''')
        self.ButtonScalar1.configure(command = lambda : self.scalar_v1())

        self.ButtonScalar2 = Button(self.Labelframe2)
        self.ButtonScalar2.place(relx=0.519, rely=0.421, height=37, width=240
                , bordermode='ignore')
        self.ButtonScalar2.configure(activebackground="#d9d9d9")
        self.ButtonScalar2.configure(activeforeground="#000000")
        self.ButtonScalar2.configure(background="lawn green")
        self.ButtonScalar2.configure(disabledforeground="#a3a3a3")
        self.ButtonScalar2.configure(font=font13)
        self.ButtonScalar2.configure(foreground="#000000")
        self.ButtonScalar2.configure(highlightbackground="#d9d9d9")
        self.ButtonScalar2.configure(highlightcolor="black")
        self.ButtonScalar2.configure(pady="0")
        self.ButtonScalar2.configure(text='''scalar and v2 multiplication''')
        self.ButtonScalar2.configure(command = lambda : self.scalar_v2())

        self.ButtonAngle = Button(self.Labelframe2)
        self.ButtonAngle.place(relx=0.519, rely=0.702, height=37, width=220
                , bordermode='ignore')
        self.ButtonAngle.configure(activebackground="#d9d9d9")
        self.ButtonAngle.configure(activeforeground="#000000")
        self.ButtonAngle.configure(background="lawn green")
        self.ButtonAngle.configure(disabledforeground="#a3a3a3")
        self.ButtonAngle.configure(font=font13)
        self.ButtonAngle.configure(foreground="#000000")
        self.ButtonAngle.configure(highlightbackground="#d9d9d9")
        self.ButtonAngle.configure(highlightcolor="black")
        self.ButtonAngle.configure(pady="0")
        self.ButtonAngle.configure(text='''Angle between v1 and v2''')
        self.ButtonAngle.configure(command = lambda : self.angle_v1v2())

        self.ButtonDot = Button(self.Labelframe2)
        self.ButtonDot.place(relx=0.067, rely=0.702, height=37, width=220
                , bordermode='ignore')
        self.ButtonDot.configure(activebackground="#d9d9d9")
        self.ButtonDot.configure(activeforeground="#000000")
        self.ButtonDot.configure(background="lawn green")
        self.ButtonDot.configure(disabledforeground="#a3a3a3")
        self.ButtonDot.configure(font=font13)
        self.ButtonDot.configure(foreground="#000000")
        self.ButtonDot.configure(highlightbackground="#d9d9d9")
        self.ButtonDot.configure(highlightcolor="black")
        self.ButtonDot.configure(pady="0")
        self.ButtonDot.configure(text='''Dot product of v1 and v 2''')
        self.ButtonDot.configure(command = lambda : self.dot_v1v2())

        self.ButtonCross = Button(self.Labelframe2)
        self.ButtonCross.place(relx=0.298, rely=0.842, height=37, width=220
                , bordermode='ignore')
        self.ButtonCross.configure(activebackground="#d9d9d9")
        self.ButtonCross.configure(activeforeground="#000000")
        self.ButtonCross.configure(background="lawn green")
        self.ButtonCross.configure(disabledforeground="#a3a3a3")
        self.ButtonCross.configure(font=font13)
        self.ButtonCross.configure(foreground="#000000")
        self.ButtonCross.configure(highlightbackground="#d9d9d9")
        self.ButtonCross.configure(highlightcolor="black")
        self.ButtonCross.configure(pady="0")
        self.ButtonCross.configure(text='''Cross product of v1 and v2''')
        self.ButtonCross.configure(width=220)
        self.ButtonCross.configure(command = lambda : self.cross_product())

        self.ButtonUnit1 = Button(self.Labelframe2)
        self.ButtonUnit1.place(relx=0.067, rely=0.561, height=37, width=220
                , bordermode='ignore')
        self.ButtonUnit1.configure(activebackground="#d9d9d9")
        self.ButtonUnit1.configure(activeforeground="#000000")
        self.ButtonUnit1.configure(background="lawn green")
        self.ButtonUnit1.configure(disabledforeground="#a3a3a3")
        self.ButtonUnit1.configure(font=font13)
        self.ButtonUnit1.configure(foreground="#000000")
        self.ButtonUnit1.configure(highlightbackground="#d9d9d9")
        self.ButtonUnit1.configure(highlightcolor="black")
        self.ButtonUnit1.configure(pady="0")
        self.ButtonUnit1.configure(text='''Unit vector of v1''')
        self.ButtonUnit1.configure(command = lambda : self.unit_v1())

        self.ButtonUnit2 = Button(self.Labelframe2)
        self.ButtonUnit2.place(relx=0.519, rely=0.561, height=37, width=220
                , bordermode='ignore')
        self.ButtonUnit2.configure(activebackground="#d9d9d9")
        self.ButtonUnit2.configure(activeforeground="#000000")
        self.ButtonUnit2.configure(background="lawn green")
        self.ButtonUnit2.configure(disabledforeground="#a3a3a3")
        self.ButtonUnit2.configure(font=font13)
        self.ButtonUnit2.configure(foreground="#000000")
        self.ButtonUnit2.configure(highlightbackground="#d9d9d9")
        self.ButtonUnit2.configure(highlightcolor="black")
        self.ButtonUnit2.configure(pady="0")
        self.ButtonUnit2.configure(text='''Unit vector of v2''')
        self.ButtonUnit2.configure(command = lambda : self.unit_v2())

        self.Labelframe3 = LabelFrame(top)
        self.Labelframe3.place(relx=0.067, rely=0.786, relheight=0.164
                , relwidth=0.867)
        self.Labelframe3.configure(relief=GROOVE)
        self.Labelframe3.configure(font=font11)
        self.Labelframe3.configure(foreground="#4400ff")
        self.Labelframe3.configure(labelanchor="n")
        self.Labelframe3.configure(text='''answer''')
        self.Labelframe3.configure(background="#efefef")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Labelframe3.configure(width=460)

        self.Result = Label(self.Labelframe3)
        self.Result.place(relx=0.0, rely=0.261, height=80, width=520
                , bordermode='ignore')
        self.Result.configure(activebackground="#f0f0f0")
        self.Result.configure(activeforeground="black")
        self.Result.configure(background="#efefef")
        self.Result.configure(disabledforeground="#a3a3a3")
        self.Result.configure(font=font14)
        self.Result.configure(foreground="#000000")
        self.Result.configure(highlightbackground="#d9d9d9")
        self.Result.configure(highlightcolor="black")

    def vector1_input(self):
        self.v1_x = float(self.Entry1.get())
        self.v1_y = float(self.Entry2.get())
        self.v1_z = float(self.Entry3.get())

    def vector2_input(self):
        self.v2_x = float(self.Entry4.get())
        self.v2_y = float(self.Entry5.get())
        self.v2_z = float(self.Entry6.get())

    def sum_v1v2(self):
        self.vector1_input(), self.vector2_input()
        ansx = self.v1_x + self.v2_x
        ansy = self.v1_y + self.v2_y
        ansz = self.v1_z + self.v2_z
        self.Result.configure(text ="v=( "+ str(ansx) +", " + str(ansy) +", "+ str(ansz)+" )")

    def sub_v1v2(self):
        self.vector1_input(), self.vector2_input()
        ansx = self.v1_x - self.v2_x
        ansy = self.v1_y - self.v2_y
        ansz = self.v1_z - self.v2_z
        self.Result.configure(text="v=( " + str(ansx) + ", " + str(ansy) + ", " + str(ansz) + " )")

    def magnitudev1(self):
        self.vector1_input()
        ans = round((self.v1_x**2 + self.v1_y**2 + self.v1_z**2)**(1/2),2)
        self.Result.configure(text="the magnitude of v1 is "+str(ans))

    def magnitudev2(self):
        self.vector2_input()
        ans = round((self.v2_x ** 2 + self.v2_y ** 2 + self.v2_z ** 2) ** (1 / 2), 2)
        self.Result.configure(text="the magnitude of v2 is " + str(ans))

    def scalar_v1(self):
        k = float(self.EntryK.get())
        ansx = k * self.v1_x
        ansy = k * self.v1_y
        ansz = k * self.v1_z
        self.Result.configure(text="kv1=( " + str(ansx) + ", " + str(ansy) + ", " + str(ansz) + " )")

    def scalar_v2(self):
        k = float(self.EntryK.get())
        ansx = k * self.v2_x
        ansy = k * self.v2_y
        ansz = k * self.v2_z
        self.Result.configure(text="kv2=( " + str(ansx) + ", " + str(ansy) + ", " + str(ansz) + " )")

    def unit_v1(self):
        self.vector1_input()
        mag = round((self.v1_x ** 2 + self.v1_y ** 2 + self.v1_z ** 2) ** (1 / 2), 2)
        ansx = round(self.v1_x / mag,2)
        ansy = round(self.v1_y / mag,2)
        ansz = round(self.v1_z / mag,2)
        self.Result.configure(text="v=( " + str(ansx) + ", " + str(ansy) + ", " + str(ansz) + " )")

    def unit_v2(self):
        self.vector2_input()
        mag = round((self.v2_x ** 2 + self.v2_y ** 2 + self.v2_z ** 2) ** (1 / 2), 2)
        ansx = round(self.v2_x / mag,2)
        ansy = round(self.v2_y / mag,2)
        ansz = round(self.v2_z / mag,2)
        self.Result.configure(text="v=( " + str(ansx) + ", " + str(ansy) + ", " + str(ansz) + " )")

    def dot_v1v2(self):
        self.vector1_input(), self.vector2_input()
        self.dotans = (self.v1_x * self.v2_x) + (self.v1_y * self.v2_y) +(self.v1_z * self.v2_z)
        self.Result.configure(text="the dot product  is " + str(self.dotans))

    def angle_v1v2(self):
        self.vector1_input(), self.vector2_input()
        magProduct = round(((self.v1_x**2+self.v1_y**2+self.v1_z**2)**(1/2))*((self.v2_x ** 2 + self.v2_y ** 2 + self.v2_z** 2) ** (1 / 2)),2)
        ans = degrees(acos(self.dotans / magProduct))
        self.Result.configure(text="the angle between vector is "+str(round(ans,2))+"°")

    def cross_product(self):
        self.vector1_input(), self.vector2_input()
        ansx = (self.v1_y * self.v2_z) - (self.v1_z * self.v2_y)
        ansy = (self.v1_x * self.v2_z) - (self.v1_z * self.v2_x)
        ansz = (self.v1_x * self.v2_y) - (self.v1_y * self.v2_x)
        self.Result.configure(text="v=( " + str(ansx) + ", " + str(-ansy) + ", " + str(ansz) + " )")

    def openBasicCal(self):
        root.destroy()
        Cal.vp_start_gui()

    def to_2by2(self):
        root.destroy()
        mat2.vp_start_gui()

    def to_3by3(self):
        root.destroy()
        mat3.vp_start_gui()

    def to_4by4(self):
        root.destroy()
        mat4.vp_start_gui()

    def openAbout(self):
        ab.vp_start_gui()

    def btoMain(self):
        root.destroy()
        mm.vp_start_gui()

    def openVector(self):
        root.destroy()
        Vec.vp_start_gui()

    def to_st(self):
        root.destroy()
        st.vp_start_gui()

    def to_ct(self):
        root.destroy()
        ct.vp_start_gui()

    def to_r3d(self):
        root.destroy()
        r3d.vp_start_gui()

    def when_closing(self):
        if askyesno('My Vector and Matrix Calculator', 'Do you really want to quit?'):
            sys.exit()
        else:
            pass









if __name__ == '__main__':
    vp_start_gui()



